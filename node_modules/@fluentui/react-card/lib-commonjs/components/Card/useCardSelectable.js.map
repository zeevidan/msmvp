{"version":3,"sources":["../src/components/Card/useCardSelectable.ts"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, slot, useControllableState } from '@fluentui/react-utilities';\nimport { Enter } from '@fluentui/keyboard-keys';\nimport { useFocusFinders } from '@fluentui/react-tabster';\n\nimport type { CardContextValue, CardOnSelectionChangeEvent, CardProps, CardSlots } from './Card.types';\n\ntype SelectableA11yProps = Pick<CardContextValue['selectableA11yProps'], 'referenceId' | 'referenceLabel'>;\n\n/**\n * @internal\n *\n * Create the state related to selectable cards.\n *\n * This internal hook controls all the logic for selectable cards and is\n * intended to be used alongside with useCard_unstable.\n *\n * @param props - props from this instance of Card\n * @param a11yProps - accessibility props shared between elements of the card\n * @param cardRef - reference to the root element of Card\n */\nexport const useCardSelectable = (\n  props: CardProps,\n  { referenceLabel, referenceId }: SelectableA11yProps,\n  cardRef: React.RefObject<HTMLDivElement>,\n) => {\n  const { checkbox = {}, onSelectionChange, floatingAction, onClick, onKeyDown } = props;\n\n  const { findAllFocusable } = useFocusFinders();\n  const checkboxRef = React.useRef<HTMLInputElement>(null);\n\n  const [selected, setSelected] = useControllableState({\n    state: props.selected,\n    defaultState: props.defaultSelected,\n    initialState: false,\n  });\n  const selectable = [props.selected, props.defaultSelected, onSelectionChange].some(\n    prop => typeof prop !== 'undefined',\n  );\n\n  const [selectFocused, setSelectFocused] = React.useState(false);\n\n  const shouldRestrictTriggerAction = React.useCallback(\n    (event: CardOnSelectionChangeEvent) => {\n      if (!cardRef.current) {\n        return false;\n      }\n\n      const focusableElements = findAllFocusable(cardRef.current);\n      const target = event.target as HTMLElement;\n      const isElementInFocusableGroup = focusableElements.some(element => element.contains(target));\n      const isCheckboxSlot = checkboxRef?.current === target;\n\n      return isElementInFocusableGroup && !isCheckboxSlot;\n    },\n    [cardRef, findAllFocusable],\n  );\n\n  const onChangeHandler = React.useCallback(\n    (event: CardOnSelectionChangeEvent) => {\n      if (shouldRestrictTriggerAction(event)) {\n        return;\n      }\n\n      const newCheckedValue = !selected;\n\n      setSelected(newCheckedValue);\n\n      if (onSelectionChange) {\n        onSelectionChange(event, { selected: newCheckedValue });\n      }\n    },\n    [onSelectionChange, selected, setSelected, shouldRestrictTriggerAction],\n  );\n\n  const onKeyDownHandler = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      if ([Enter].includes(event.key)) {\n        event.preventDefault();\n        onChangeHandler(event);\n      }\n    },\n    [onChangeHandler],\n  );\n\n  const checkboxSlot = React.useMemo(() => {\n    if (!selectable || floatingAction) {\n      return;\n    }\n\n    const selectableCheckboxProps: CardSlots['checkbox'] = {};\n\n    if (referenceId) {\n      selectableCheckboxProps['aria-labelledby'] = referenceId;\n    } else if (referenceLabel) {\n      selectableCheckboxProps['aria-label'] = referenceLabel;\n    }\n\n    return slot.optional(checkbox, {\n      defaultProps: {\n        ref: checkboxRef,\n        type: 'checkbox',\n        checked: selected,\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => onChangeHandler(event),\n        onFocus: () => setSelectFocused(true),\n        onBlur: () => setSelectFocused(false),\n        ...selectableCheckboxProps,\n      },\n      elementType: 'input',\n    });\n  }, [checkbox, floatingAction, selected, selectable, onChangeHandler, referenceId, referenceLabel]);\n\n  const floatingActionSlot = React.useMemo(() => {\n    if (!floatingAction) {\n      return;\n    }\n\n    return slot.optional(floatingAction, {\n      defaultProps: {\n        ref: checkboxRef,\n      },\n      elementType: 'div',\n    });\n  }, [floatingAction]);\n\n  const selectableCardProps = React.useMemo(() => {\n    if (!selectable) {\n      return null;\n    }\n\n    return {\n      onClick: mergeCallbacks(onClick, onChangeHandler),\n      onKeyDown: mergeCallbacks(onKeyDown, onKeyDownHandler),\n    };\n  }, [selectable, onChangeHandler, onClick, onKeyDown, onKeyDownHandler]);\n\n  return {\n    selected,\n    selectable,\n    selectFocused,\n    selectableCardProps,\n    checkboxSlot,\n    floatingActionSlot,\n  };\n};\n"],"names":["useCardSelectable","props","referenceLabel","referenceId","cardRef","checkbox","onSelectionChange","floatingAction","onClick","onKeyDown","findAllFocusable","useFocusFinders","checkboxRef","React","useRef","selected","setSelected","useControllableState","state","defaultState","defaultSelected","initialState","selectable","some","prop","selectFocused","setSelectFocused","useState","shouldRestrictTriggerAction","useCallback","event","current","focusableElements","target","isElementInFocusableGroup","element","contains","isCheckboxSlot","onChangeHandler","newCheckedValue","onKeyDownHandler","Enter","includes","key","preventDefault","checkboxSlot","useMemo","selectableCheckboxProps","slot","optional","defaultProps","ref","type","checked","onChange","onFocus","onBlur","elementType","floatingActionSlot","selectableCardProps","mergeCallbacks"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}