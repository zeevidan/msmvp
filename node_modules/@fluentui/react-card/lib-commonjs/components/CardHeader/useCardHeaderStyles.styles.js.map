{"version":3,"sources":["useCardHeaderStyles.styles.js"],"sourcesContent":["import { makeStyles, mergeClasses, shorthands } from '@griffel/react';\n/**\n * Static CSS class names used internally for the component slots.\n */ export const cardHeaderClassNames = {\n    root: 'fui-CardHeader',\n    image: 'fui-CardHeader__image',\n    header: 'fui-CardHeader__header',\n    description: 'fui-CardHeader__description',\n    action: 'fui-CardHeader__action'\n};\n/**\n * CSS variable names used internally for uniform styling in CardHeader.\n */ export const cardHeaderCSSVars = {\n    cardHeaderGapVar: '--fui-CardHeader--gap'\n};\nconst useStyles = makeStyles({\n    root: {\n        [cardHeaderCSSVars.cardHeaderGapVar]: '12px',\n        alignItems: 'center'\n    },\n    image: {\n        display: 'inline-flex',\n        marginRight: `var(${cardHeaderCSSVars.cardHeaderGapVar})`\n    },\n    header: {\n        display: 'flex'\n    },\n    description: {\n        display: 'flex'\n    },\n    action: {\n        marginLeft: `var(${cardHeaderCSSVars.cardHeaderGapVar})`,\n        // when the card is selected or hovered, it has custom high contrast color and background styles\n        // setting this ensures action buttons adopt those colors and are still visible in forced-colors mode\n        '@media (forced-colors: active)': {\n            '& .fui-Button, & .fui-Link': {\n                ...shorthands.borderColor('currentColor'),\n                color: 'currentColor',\n                outlineColor: 'currentColor'\n            }\n        }\n    }\n});\nconst useStylesGrid = makeStyles({\n    root: {\n        display: 'grid',\n        gridAutoColumns: 'min-content 1fr min-content'\n    },\n    image: {\n        gridColumnStart: '1',\n        gridRowStart: 'span 2'\n    },\n    header: {\n        gridColumnStart: '2',\n        gridRowStart: '1'\n    },\n    description: {\n        gridColumnStart: '2',\n        gridRowStart: '2'\n    },\n    action: {\n        gridColumnStart: '3',\n        gridRowStart: 'span 2'\n    }\n});\nconst useStylesFlex = makeStyles({\n    root: {\n        display: 'flex'\n    },\n    header: {\n        flexGrow: 1\n    },\n    image: {},\n    description: {},\n    action: {}\n});\n/**\n * Apply styling to the CardHeader slots based on the state.\n */ export const useCardHeaderStyles_unstable = (state)=>{\n    'use no memo';\n    const styles = useStyles();\n    const stylesGrid = useStylesGrid();\n    const stylesFlex = useStylesFlex();\n    const boxModelStyles = state.description ? stylesGrid : stylesFlex;\n    const getSlotStyles = (slotName)=>{\n        var _state_slotName;\n        return mergeClasses(cardHeaderClassNames[slotName], styles[slotName], boxModelStyles[slotName], (_state_slotName = state[slotName]) === null || _state_slotName === void 0 ? void 0 : _state_slotName.className);\n    };\n    state.root.className = getSlotStyles('root');\n    if (state.image) {\n        state.image.className = getSlotStyles('image');\n    }\n    if (state.header) {\n        state.header.className = getSlotStyles('header');\n    }\n    if (state.description) {\n        state.description.className = getSlotStyles('description');\n    }\n    if (state.action) {\n        state.action.className = getSlotStyles('action');\n    }\n    return state;\n};\n"],"names":["cardHeaderCSSVars","cardHeaderClassNames","useCardHeaderStyles_unstable","root","image","header","description","action","cardHeaderGapVar","useStyles","__styles","Bkc6ea2","Bt984gj","mc9l5x","t21cq0","Frg6f3","B7frvx2","B06c7xf","B8uq84v","snkdo8","Bpf22ct","apjfyd","d","m","useStylesGrid","t4k1zu","Br312pm","Ijaq50","useStylesFlex","Bh6795r","state","styles","stylesGrid","stylesFlex","boxModelStyles","getSlotStyles","slotName","_state_slotName","mergeClasses","className"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}