{"version":3,"sources":["../src/utils/useTriggerSlot.ts"],"sourcesContent":["import * as React from 'react';\nimport { useSetKeyboardNavigation } from '@fluentui/react-tabster';\nimport type { ActiveDescendantImperativeRef } from '@fluentui/react-aria';\nimport { mergeCallbacks, slot, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport type { ExtractSlotProps, Slot, SlotComponentType } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey } from '../utils/dropdownKeyActions';\nimport type { ComboboxBaseState } from './ComboboxBase.types';\nimport { OptionValue } from './OptionCollection.types';\n\nexport type UseTriggerSlotState = Pick<\n  ComboboxBaseState,\n  'open' | 'getOptionById' | 'selectOption' | 'setOpen' | 'multiselect' | 'setHasFocus'\n>;\n\ntype UseTriggerSlotOptions = {\n  state: UseTriggerSlotState;\n  defaultProps: unknown;\n  activeDescendantController: ActiveDescendantImperativeRef;\n};\n\nexport function useTriggerSlot(\n  triggerSlotFromProp: NonNullable<Slot<'button'>>,\n  ref: React.Ref<HTMLButtonElement>,\n  options: UseTriggerSlotOptions & { elementType: 'button' },\n): SlotComponentType<ExtractSlotProps<Slot<'button'>>>;\n\nexport function useTriggerSlot(\n  triggerSlotFromProp: NonNullable<Slot<'input'>>,\n  ref: React.Ref<HTMLInputElement>,\n  options: UseTriggerSlotOptions & { elementType: 'input' },\n): SlotComponentType<ExtractSlotProps<Slot<'input'>>>;\n\n/**\n * Shared trigger behaviour for combobox and dropdown\n * @returns trigger slot with desired behaviour and props\n */\nexport function useTriggerSlot(\n  triggerSlotFromProp: NonNullable<Slot<'input'>> | NonNullable<Slot<'button'>>,\n  ref: React.Ref<HTMLButtonElement> | React.Ref<HTMLInputElement>,\n  options: UseTriggerSlotOptions & { elementType: 'input' | 'button' },\n): SlotComponentType<ExtractSlotProps<Slot<'button'>>> | SlotComponentType<ExtractSlotProps<Slot<'input'>>> {\n  const {\n    state: { open, setOpen, setHasFocus },\n    defaultProps,\n    elementType,\n    activeDescendantController,\n  } = options;\n\n  const trigger = slot.always(triggerSlotFromProp, {\n    defaultProps: {\n      type: 'text',\n      'aria-expanded': open,\n      role: 'combobox',\n      ...(typeof defaultProps === 'object' && defaultProps),\n    },\n    elementType,\n  });\n\n  // handle trigger focus/blur\n  const triggerRef = React.useRef<HTMLButtonElement | HTMLInputElement>(null);\n  trigger.ref = useMergedRefs(triggerRef, trigger.ref, ref) as React.Ref<HTMLButtonElement & HTMLInputElement>;\n\n  // the trigger should open/close the popup on click or blur\n  trigger.onBlur = mergeCallbacks((event: React.FocusEvent<HTMLButtonElement> & React.FocusEvent<HTMLInputElement>) => {\n    setOpen(event, false);\n    setHasFocus(false);\n  }, trigger.onBlur);\n\n  trigger.onFocus = mergeCallbacks(\n    (event: React.FocusEvent<HTMLButtonElement> & React.FocusEvent<HTMLInputElement>) => {\n      if (event.target === event.currentTarget) {\n        setHasFocus(true);\n      }\n    },\n    trigger.onFocus,\n  );\n  trigger.onClick = mergeCallbacks(\n    (event: React.MouseEvent<HTMLButtonElement> & React.MouseEvent<HTMLInputElement>) => {\n      setOpen(event, !open);\n    },\n    trigger.onClick,\n  );\n\n  // handle combobox keyboard interaction\n  trigger.onKeyDown = mergeCallbacks(\n    useTriggerKeydown({ activeDescendantController, ...options.state }),\n    trigger.onKeyDown,\n  );\n\n  return trigger as SlotComponentType<ExtractSlotProps<Slot<'input'>>>;\n}\n\nfunction useTriggerKeydown(\n  options: {\n    activeDescendantController: ActiveDescendantImperativeRef;\n  } & Pick<UseTriggerSlotState, 'setOpen' | 'selectOption' | 'getOptionById' | 'multiselect' | 'open'>,\n) {\n  const { activeDescendantController, getOptionById, setOpen, selectOption, multiselect, open } = options;\n\n  const getActiveOption = React.useCallback(() => {\n    const activeOptionId = activeDescendantController.active();\n    return activeOptionId ? getOptionById(activeOptionId) : undefined;\n  }, [activeDescendantController, getOptionById]);\n\n  const first = () => {\n    activeDescendantController.first();\n  };\n\n  const last = () => {\n    activeDescendantController.last();\n  };\n\n  const next = (activeOption: OptionValue | undefined) => {\n    if (activeOption) {\n      activeDescendantController.next();\n    } else {\n      activeDescendantController.first();\n    }\n  };\n\n  const previous = (activeOption: OptionValue | undefined) => {\n    if (activeOption) {\n      activeDescendantController.prev();\n    } else {\n      activeDescendantController.first();\n    }\n  };\n\n  const pageUp = () => {\n    for (let i = 0; i < 10; i++) {\n      activeDescendantController.prev();\n    }\n  };\n\n  const pageDown = () => {\n    for (let i = 0; i < 10; i++) {\n      activeDescendantController.next();\n    }\n  };\n\n  const setKeyboardNavigation = useSetKeyboardNavigation();\n  return useEventCallback((e: React.KeyboardEvent<HTMLInputElement> & React.KeyboardEvent<HTMLButtonElement>) => {\n    const action = getDropdownActionFromKey(e, { open, multiselect });\n    const activeOption = getActiveOption();\n\n    switch (action) {\n      case 'First':\n      case 'Last':\n      case 'Next':\n      case 'Previous':\n      case 'PageDown':\n      case 'PageUp':\n      case 'Open':\n      case 'Close':\n      case 'CloseSelect':\n      case 'Select':\n        e.preventDefault();\n        break;\n    }\n\n    setKeyboardNavigation(true);\n\n    switch (action) {\n      case 'First':\n        first();\n        break;\n      case 'Last':\n        last();\n        break;\n      case 'Next':\n        next(activeOption);\n        break;\n      case 'Previous':\n        previous(activeOption);\n        break;\n      case 'PageDown':\n        pageDown();\n        break;\n      case 'PageUp':\n        pageUp();\n        break;\n      case 'Open':\n        setOpen(e, true);\n        break;\n      case 'Close':\n        // stop propagation for escape key to avoid dismissing any parent popups\n        e.stopPropagation();\n        setOpen(e, false);\n        break;\n      case 'CloseSelect':\n        !multiselect && !activeOption?.disabled && setOpen(e, false);\n      // fallthrough\n      case 'Select':\n        activeOption && selectOption(e, activeOption);\n        break;\n      case 'Tab':\n        !multiselect && activeOption && selectOption(e, activeOption);\n        break;\n    }\n  });\n}\n"],"names":["useTriggerSlot","triggerSlotFromProp","ref","options","state","open","setOpen","setHasFocus","defaultProps","elementType","activeDescendantController","trigger","slot","always","type","role","triggerRef","React","useRef","useMergedRefs","onBlur","mergeCallbacks","event","onFocus","target","currentTarget","onClick","onKeyDown","useTriggerKeydown","getOptionById","selectOption","multiselect","getActiveOption","useCallback","activeOptionId","active","undefined","first","last","next","activeOption","previous","prev","pageUp","i","pageDown","setKeyboardNavigation","useSetKeyboardNavigation","useEventCallback","e","action","getDropdownActionFromKey","preventDefault","stopPropagation","disabled"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}