{"version":3,"sources":["../src/utils/OptionCollection.types.ts"],"sourcesContent":["export type OptionValue = {\n  /** The disabled state of the option. */\n  disabled?: boolean;\n\n  /** The `id` attribute of the option. */\n  id: string;\n\n  /** The `text` string for the option. */\n  text: string;\n\n  /** The value string of the option. */\n  value: string;\n};\n\nexport type OptionCollectionState = {\n  /**\n   * @deprecated - no longer used internally\n   */\n  getIndexOfId(id: string): number;\n\n  /**\n   * @deprecated - no longer used internally\n   */\n  getOptionAtIndex(index: number): OptionValue | undefined;\n\n  /**\n   * @deprecated - no longer used internally\n   */\n  getOptionsMatchingText(matcher: (text: string) => boolean): OptionValue[];\n\n  /** The total number of options in the collection. */\n  getCount: () => number;\n\n  /** Returns the option data by key. */\n  getOptionById(id: string): OptionValue | undefined;\n\n  /** Returns an array of options filtered by a value matching function against the option's value string. */\n  getOptionsMatchingValue(matcher: (value: string) => boolean): OptionValue[];\n\n  /** The unordered option data. */\n  options: OptionValue[];\n\n  /** A function that child options call to register their values. Returns a function to unregister the option. */\n  registerOption: (option: OptionValue, element: HTMLElement) => () => void;\n};\n"],"names":[],"rangeMappings":"","mappings":""}