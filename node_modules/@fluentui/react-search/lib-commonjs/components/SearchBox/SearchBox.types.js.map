{"version":3,"sources":["../src/components/SearchBox/SearchBox.types.ts"],"sourcesContent":["import * as React from 'react';\nimport type { ComponentProps, ComponentState, Slot } from '@fluentui/react-utilities';\nimport type { InputOnChangeData, InputProps, InputSlots, InputState } from '@fluentui/react-input';\n\nexport type SearchBoxSlots = InputSlots & {\n  /** Last element in the input, within the input border */\n  dismiss?: Slot<'span'>;\n};\n\n/**\n * SearchBox Props\n */\nexport type SearchBoxProps = Omit<\n  ComponentProps<Partial<SearchBoxSlots>, 'input'>,\n  // `children` is unsupported. The rest of these native props have customized definitions.\n  'children' | 'defaultValue' | 'onChange' | 'size' | 'type' | 'value'\n> &\n  Omit<InputProps, 'onChange'> & {\n    /**\n     * Custom onChange callback.\n     * Will be traditionally supplied with a React.ChangeEvent<HTMLInputElement> for usual character entry.\n     * When the dismiss button is clicked, this will be called with an event of type React.MouseEvent<HTMLSpanElement>\n     * and an empty string as the `value` property of the data parameter\n     */\n    // eslint-disable-next-line @nx/workspace-consistent-callback-type -- can't change type of existing callback\n    onChange?: (event: SearchBoxChangeEvent, data: InputOnChangeData) => void;\n  };\n\n/**\n * State used in rendering SearchBox\n */\nexport type SearchBoxState = ComponentState<SearchBoxSlots> &\n  InputState &\n  Required<Pick<InputState, 'size'>> &\n  Required<Pick<SearchBoxProps, 'disabled'>> & {\n    focused: boolean;\n  };\n\n/** Overloaded onChange event type, used to merge functionality of regular text entry and the dismiss button */\nexport type SearchBoxChangeEvent = React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLSpanElement>;\n"],"names":[],"rangeMappings":";;;;;","mappings":";;;;;iEAAuB"}