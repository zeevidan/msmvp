{"version":3,"sources":["../src/components/Toaster/useToaster.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  ExtractSlotProps,\n  Slot,\n  getIntrinsicElementProps,\n  useEventCallback,\n  useMergedRefs,\n  slot,\n} from '@fluentui/react-utilities';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useFocusableGroup } from '@fluentui/react-tabster';\nimport { Escape } from '@fluentui/keyboard-keys';\nimport type { ToasterProps, ToasterState } from './Toaster.types';\nimport { TOAST_POSITIONS, ToastPosition, useToaster } from '../../state';\nimport { Announce } from '../AriaLive';\nimport { ToastContainer } from '../ToastContainer';\nimport { useToasterFocusManagement_unstable } from './useToasterFocusManagement';\nimport { useToastAnnounce } from './useToastAnnounce';\n\n/**\n * Create the state required to render Toaster.\n *\n * @param props - props from this instance of Toaster\n */\nexport const useToaster_unstable = (props: ToasterProps): ToasterState => {\n  'use no memo';\n\n  const { offset, announce: announceProp, mountNode, inline = false, ...rest } = props;\n  const announceRef = React.useRef<Announce>(() => null);\n  const { toastsToRender, isToastVisible, pauseAllToasts, playAllToasts, tryRestoreFocus, closeAllToasts } =\n    useToaster<HTMLDivElement>(rest);\n  const announce = React.useCallback<Announce>((message, options) => announceRef.current(message, options), []);\n  const { dir } = useFluent();\n\n  const rootProps = slot.always(getIntrinsicElementProps<ExtractSlotProps<Slot<'div'>>>('div', rest), {\n    elementType: 'div',\n  });\n  const focusableGroupAttr = useFocusableGroup({\n    tabBehavior: 'limited-trap-focus',\n    ignoreDefaultKeydown: { Escape: true },\n  });\n  const onKeyDown = useEventCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === Escape) {\n      e.preventDefault();\n      closeAllToasts();\n    }\n    props.onKeyDown?.(e);\n  });\n  const usePositionSlot = (toastPosition: ToastPosition) => {\n    const focusManagementRef = useToasterFocusManagement_unstable(pauseAllToasts, playAllToasts);\n    const { announceToast, toasterRef } = useToastAnnounce(announceProp ?? announce);\n    return slot.optional<ExtractSlotProps<Slot<'div'>>>(toastsToRender.has(toastPosition) ? rootProps : null, {\n      defaultProps: {\n        ref: useMergedRefs(focusManagementRef, toasterRef),\n        children: toastsToRender.get(toastPosition)?.map(toast => (\n          <ToastContainer\n            {...toast}\n            tryRestoreFocus={tryRestoreFocus}\n            intent={toast.intent}\n            announce={announceToast}\n            key={toast.toastId}\n            visible={isToastVisible(toast.toastId)}\n          >\n            {toast.content as React.ReactNode}\n          </ToastContainer>\n        )),\n        onKeyDown,\n        ...focusableGroupAttr,\n        'data-toaster-position': toastPosition,\n        role: 'list',\n        // Explicitly casting because our slot types can't handle data attributes\n      } as ExtractSlotProps<Slot<'div'>>,\n      elementType: 'div',\n    });\n  };\n\n  return {\n    dir,\n    mountNode,\n    components: {\n      root: 'div',\n      bottomStart: 'div',\n      bottomEnd: 'div',\n      topStart: 'div',\n      topEnd: 'div',\n      top: 'div',\n      bottom: 'div',\n    },\n    root: slot.always(rootProps, { elementType: 'div' }),\n    bottomStart: usePositionSlot(TOAST_POSITIONS.bottomStart),\n    bottomEnd: usePositionSlot(TOAST_POSITIONS.bottomEnd),\n    topStart: usePositionSlot(TOAST_POSITIONS.topStart),\n    topEnd: usePositionSlot(TOAST_POSITIONS.topEnd),\n    top: usePositionSlot(TOAST_POSITIONS.top),\n    bottom: usePositionSlot(TOAST_POSITIONS.bottom),\n    announceRef,\n    offset,\n    announce: announceProp ?? announce,\n    renderAriaLive: !announceProp,\n    inline,\n  };\n};\n"],"names":["useToaster_unstable","props","offset","announce","announceProp","mountNode","inline","rest","announceRef","React","useRef","toastsToRender","isToastVisible","pauseAllToasts","playAllToasts","tryRestoreFocus","closeAllToasts","useToaster","useCallback","message","options","current","dir","useFluent","rootProps","slot","always","getIntrinsicElementProps","elementType","focusableGroupAttr","useFocusableGroup","tabBehavior","ignoreDefaultKeydown","Escape","onKeyDown","useEventCallback","e","key","preventDefault","usePositionSlot","toastPosition","focusManagementRef","useToasterFocusManagement_unstable","announceToast","toasterRef","useToastAnnounce","optional","has","defaultProps","ref","useMergedRefs","children","get","map","toast","createElement","ToastContainer","intent","toastId","visible","content","role","components","root","bottomStart","bottomEnd","topStart","topEnd","top","bottom","TOAST_POSITIONS","renderAriaLive"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}