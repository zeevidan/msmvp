{"version":3,"sources":["../src/components/Timer/Timer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useBaseAnimationStyles } from './useTimerStyles.styles';\n\nexport type TimerProps = {\n  running: boolean;\n  timeout: number;\n  // eslint-disable-next-line @nx/workspace-consistent-callback-type -- can't change type of existing callback\n  onTimeout: () => void;\n  as?: 'span';\n};\n\nexport const Timer = React.forwardRef<HTMLDivElement, TimerProps>((props, ref) => {\n  const baseAnimationStyles = useBaseAnimationStyles();\n  const { running, timeout, onTimeout } = props;\n\n  const style: React.CSSProperties = {\n    animationDuration: `${timeout}ms`,\n    animationPlayState: running ? 'running' : 'paused',\n  };\n\n  if (timeout < 0) {\n    return null;\n  }\n\n  return (\n    <span\n      onAnimationEnd={onTimeout}\n      data-timer-status={style.animationPlayState}\n      ref={ref}\n      style={style}\n      className={baseAnimationStyles}\n    />\n  );\n});\n\nTimer.displayName = 'Timer';\n"],"names":["Timer","React","forwardRef","props","ref","baseAnimationStyles","useBaseAnimationStyles","running","timeout","onTimeout","style","animationDuration","animationPlayState","createElement","span","onAnimationEnd","data-timer-status","className","displayName"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAWaA;;;eAAAA;;;;iEAXU;sCACgB;AAUhC,MAAMA,QAAAA,WAAAA,GAAQC,OAAMC,UAAU,CAA6B,CAACC,OAAOC;IACxE,MAAMC,sBAAsBC,IAAAA,4CAAAA;IAC5B,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,SAAS,EAAE,GAAGN;IAExC,MAAMO,QAA6B;QACjCC,mBAAmB,CAAC,EAAEH,QAAQ,EAAE,CAAC;QACjCI,oBAAoBL,UAAU,YAAY;IAC5C;IAEA,IAAIC,UAAU,GAAG;QACf,OAAO;IACT;IAEA,OAAA,WAAA,GACEP,OAAAY,aAAA,CAACC,QAAAA;QACCC,gBAAgBN;QAChBO,qBAAmBN,MAAME,kBAAkB;QAC3CR,KAAKA;QACLM,OAAOA;QACPO,WAAWZ;;AAGjB;AAEAL,MAAMkB,WAAW,GAAG"}