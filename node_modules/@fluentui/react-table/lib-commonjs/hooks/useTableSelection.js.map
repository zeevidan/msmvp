{"version":3,"sources":["../src/hooks/useTableSelection.ts"],"sourcesContent":["import * as React from 'react';\nimport { SelectionHookParams, useEventCallback, useSelection } from '@fluentui/react-utilities';\nimport type { TableRowId, TableSelectionState, TableFeaturesState } from './types';\n\nconst noop = () => undefined;\n\nexport const defaultTableSelectionState: TableSelectionState = {\n  allRowsSelected: false,\n  clearRows: noop,\n  deselectRow: noop,\n  isRowSelected: () => false,\n  selectRow: noop,\n  selectedRows: new Set(),\n  someRowsSelected: false,\n  toggleAllRows: noop,\n  toggleRow: noop,\n  selectionMode: 'multiselect',\n};\n\nexport function useTableSelection<TItem>(options: SelectionHookParams) {\n  'use no memo';\n\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return (tableState: TableFeaturesState<TItem>) => useTableSelectionState(tableState, options);\n}\n\nexport function useTableSelectionState<TItem>(\n  tableState: TableFeaturesState<TItem>,\n  options: SelectionHookParams,\n): TableFeaturesState<TItem> {\n  const { items, getRowId } = tableState;\n  const { selectionMode: selectionMode, defaultSelectedItems, selectedItems, onSelectionChange } = options;\n\n  const [selected, selectionMethods] = useSelection({\n    selectionMode,\n    defaultSelectedItems,\n    selectedItems,\n    onSelectionChange,\n  });\n\n  // Selection state can contain obselete items (i.e. rows that are removed)\n  const selectableRowIds = React.useMemo(() => {\n    const rowIds = new Set<TableRowId>();\n    for (let i = 0; i < items.length; i++) {\n      rowIds.add(getRowId?.(items[i]) ?? i);\n    }\n\n    return rowIds;\n  }, [items, getRowId]);\n\n  const allRowsSelected = React.useMemo(() => {\n    if (selectionMode === 'single') {\n      const selectedRow = Array.from(selected)[0];\n      return selectableRowIds.has(selectedRow);\n    }\n\n    // multiselect case\n    if (selected.size < selectableRowIds.size) {\n      return false;\n    }\n\n    if (selectableRowIds.size === 0) {\n      return false;\n    }\n\n    let res = true;\n    selectableRowIds.forEach(selectableRowId => {\n      if (!selected.has(selectableRowId)) {\n        res = false;\n      }\n    });\n\n    return res;\n  }, [selectableRowIds, selected, selectionMode]);\n\n  const someRowsSelected = React.useMemo(() => {\n    if (selected.size <= 0) {\n      return false;\n    }\n\n    let res = false;\n    selectableRowIds.forEach(selectableRowId => {\n      if (selected.has(selectableRowId)) {\n        res = true;\n      }\n    });\n\n    return res;\n  }, [selectableRowIds, selected]);\n\n  const toggleAllRows: TableSelectionState['toggleAllRows'] = useEventCallback(e => {\n    selectionMethods.toggleAllItems(\n      e,\n      items.map((item, i) => getRowId?.(item) ?? i),\n    );\n  });\n\n  const toggleRow: TableSelectionState['toggleRow'] = useEventCallback((e, rowId: TableRowId) =>\n    selectionMethods.toggleItem(e, rowId),\n  );\n\n  const deselectRow: TableSelectionState['deselectRow'] = useEventCallback((e, rowId: TableRowId) =>\n    selectionMethods.deselectItem(e, rowId),\n  );\n\n  const selectRow: TableSelectionState['selectRow'] = useEventCallback((e, rowId: TableRowId) =>\n    selectionMethods.selectItem(e, rowId),\n  );\n\n  const isRowSelected: TableSelectionState['isRowSelected'] = (rowId: TableRowId) => selectionMethods.isSelected(rowId);\n\n  const clearRows: TableSelectionState['clearRows'] = useEventCallback(e => selectionMethods.clearItems(e));\n\n  return {\n    ...tableState,\n    selection: {\n      selectionMode,\n      someRowsSelected,\n      allRowsSelected,\n      selectedRows: selected,\n      toggleRow,\n      toggleAllRows,\n      clearRows,\n      deselectRow,\n      selectRow,\n      isRowSelected,\n    },\n  };\n}\n"],"names":["defaultTableSelectionState","useTableSelection","useTableSelectionState","noop","undefined","allRowsSelected","clearRows","deselectRow","isRowSelected","selectRow","selectedRows","Set","someRowsSelected","toggleAllRows","toggleRow","selectionMode","options","tableState","items","getRowId","defaultSelectedItems","selectedItems","onSelectionChange","selected","selectionMethods","useSelection","selectableRowIds","React","useMemo","rowIds","i","length","add","selectedRow","Array","from","has","size","res","forEach","selectableRowId","useEventCallback","e","toggleAllItems","map","item","rowId","toggleItem","deselectItem","selectItem","isSelected","clearItems","selection"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}