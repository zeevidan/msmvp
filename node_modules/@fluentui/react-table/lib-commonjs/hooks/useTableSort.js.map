{"version":3,"sources":["../src/hooks/useTableSort.ts"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport type {\n  TableColumnId,\n  TableRowData,\n  SortState,\n  TableSortState,\n  TableFeaturesState,\n  UseTableSortOptions,\n} from './types';\n\nconst noop = () => undefined;\n\nexport const defaultTableSortState: TableSortState<unknown> = {\n  getSortDirection: () => 'ascending',\n  setColumnSort: noop,\n  sort: <TRowState extends TableRowData<unknown>>(rows: TRowState[]) => [...rows],\n  sortColumn: undefined,\n  sortDirection: 'ascending',\n  toggleColumnSort: noop,\n};\n\nexport function useTableSort<TItem>(options: UseTableSortOptions) {\n  'use no memo';\n\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return (tableState: TableFeaturesState<TItem>) => useTableSortState(tableState, options);\n}\n\nexport function useTableSortState<TItem>(\n  tableState: TableFeaturesState<TItem>,\n  options: UseTableSortOptions,\n): TableFeaturesState<TItem> {\n  const { columns } = tableState;\n  const { sortState, defaultSortState, onSortChange: onSortChangeProp = noop } = options;\n\n  const [sorted, setSorted] = useControllableState<SortState>({\n    initialState: {\n      sortDirection: 'ascending' as const,\n      sortColumn: undefined,\n    },\n    defaultState: defaultSortState,\n    state: sortState,\n  });\n\n  const { sortColumn, sortDirection } = sorted;\n\n  const onSortChange = useEventCallback(onSortChangeProp);\n\n  const toggleColumnSort = React.useCallback(\n    (e: React.SyntheticEvent, columnId: TableColumnId | undefined) => {\n      setSorted(s => {\n        const newState = { ...s, sortColumn: columnId };\n        if (s.sortColumn === columnId) {\n          newState.sortDirection = s.sortDirection === 'ascending' ? 'descending' : 'ascending';\n        } else {\n          newState.sortDirection = 'ascending';\n        }\n\n        onSortChange?.(e, newState);\n        return newState;\n      });\n    },\n    [onSortChange, setSorted],\n  );\n\n  const setColumnSort: TableSortState<TItem>['setColumnSort'] = (e, nextSortColumn, nextSortDirection) => {\n    const newState = { sortColumn: nextSortColumn, sortDirection: nextSortDirection };\n    onSortChange?.(e, newState);\n    setSorted(newState);\n  };\n\n  const sort = React.useCallback(\n    <TRowState extends TableRowData<TItem>>(rows: TRowState[]) => {\n      return rows.slice().sort((a, b) => {\n        const sortColumnDef = columns.find(column => column.columnId === sortColumn);\n        if (!sortColumnDef?.compare) {\n          return 0;\n        }\n\n        const mod = sortDirection === 'ascending' ? 1 : -1;\n        return sortColumnDef.compare(a.item, b.item) * mod;\n      });\n    },\n    [columns, sortColumn, sortDirection],\n  );\n\n  const getSortDirection: TableSortState<TItem>['getSortDirection'] = (columnId: TableColumnId) => {\n    return sortColumn === columnId ? sortDirection : undefined;\n  };\n\n  return {\n    ...tableState,\n    sort: {\n      sort,\n      sortColumn,\n      sortDirection,\n      setColumnSort,\n      toggleColumnSort,\n      getSortDirection,\n    },\n  };\n}\n"],"names":["defaultTableSortState","useTableSort","useTableSortState","noop","undefined","getSortDirection","setColumnSort","sort","rows","sortColumn","sortDirection","toggleColumnSort","options","tableState","columns","sortState","defaultSortState","onSortChange","onSortChangeProp","sorted","setSorted","useControllableState","initialState","defaultState","state","useEventCallback","React","useCallback","e","columnId","s","newState","nextSortColumn","nextSortDirection","slice","a","b","sortColumnDef","find","column","compare","mod","item"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAaaA,qBAAAA;eAAAA;;IASGC,YAAAA;eAAAA;;IAQAC,iBAAAA;eAAAA;;;;iEA9BO;gCACgC;AAUvD,MAAMC,OAAO,IAAMC;AAEZ,MAAMJ,wBAAiD;IAC5DK,kBAAkB,IAAM;IACxBC,eAAeH;IACfI,MAAM,CAA0CC,OAAsB;eAAIA;SAAK;IAC/EC,YAAYL;IACZM,eAAe;IACfC,kBAAkBR;AACpB;AAEO,SAASF,aAAoBW,OAA4B;IAC9D;IAEA,4EAA4E;IAC5E,sDAAsD;IACtD,OAAO,CAACC,aAA0CX,kBAAkBW,YAAYD;AAClF;AAEO,SAASV,kBACdW,UAAqC,EACrCD,OAA4B;IAE5B,MAAM,EAAEE,OAAO,EAAE,GAAGD;IACpB,MAAM,EAAEE,SAAS,EAAEC,gBAAgB,EAAEC,cAAcC,mBAAmBf,IAAI,EAAE,GAAGS;IAE/E,MAAM,CAACO,QAAQC,UAAU,GAAGC,IAAAA,oCAAAA,EAAgC;QAC1DC,cAAc;YACZZ,eAAe;YACfD,YAAYL;QACd;QACAmB,cAAcP;QACdQ,OAAOT;IACT;IAEA,MAAM,EAAEN,UAAU,EAAEC,aAAa,EAAE,GAAGS;IAEtC,MAAMF,eAAeQ,IAAAA,gCAAAA,EAAiBP;IAEtC,MAAMP,mBAAmBe,OAAMC,WAAW,CACxC,CAACC,GAAyBC;QACxBT,UAAUU,CAAAA;YACR,MAAMC,WAAW;gBAAE,GAAGD,CAAC;gBAAErB,YAAYoB;YAAS;YAC9C,IAAIC,EAAErB,UAAU,KAAKoB,UAAU;gBAC7BE,SAASrB,aAAa,GAAGoB,EAAEpB,aAAa,KAAK,cAAc,eAAe;YAC5E,OAAO;gBACLqB,SAASrB,aAAa,GAAG;YAC3B;YAEAO,iBAAAA,QAAAA,iBAAAA,KAAAA,IAAAA,KAAAA,IAAAA,aAAeW,GAAGG;YAClB,OAAOA;QACT;IACF,GACA;QAACd;QAAcG;KAAU;IAG3B,MAAMd,gBAAwD,CAACsB,GAAGI,gBAAgBC;QAChF,MAAMF,WAAW;YAAEtB,YAAYuB;YAAgBtB,eAAeuB;QAAkB;QAChFhB,iBAAAA,QAAAA,iBAAAA,KAAAA,IAAAA,KAAAA,IAAAA,aAAeW,GAAGG;QAClBX,UAAUW;IACZ;IAEA,MAAMxB,OAAOmB,OAAMC,WAAW,CAC5B,CAAwCnB;QACtC,OAAOA,KAAK0B,KAAK,GAAG3B,IAAI,CAAC,CAAC4B,GAAGC;YAC3B,MAAMC,gBAAgBvB,QAAQwB,IAAI,CAACC,CAAAA,SAAUA,OAAOV,QAAQ,KAAKpB;YACjE,IAAI,CAAC4B,CAAAA,kBAAAA,QAAAA,kBAAAA,KAAAA,IAAAA,KAAAA,IAAAA,cAAeG,OAAO,AAAPA,GAAS;gBAC3B,OAAO;YACT;YAEA,MAAMC,MAAM/B,kBAAkB,cAAc,IAAI,CAAC;YACjD,OAAO2B,cAAcG,OAAO,CAACL,EAAEO,IAAI,EAAEN,EAAEM,IAAI,IAAID;QACjD;IACF,GACA;QAAC3B;QAASL;QAAYC;KAAc;IAGtC,MAAML,mBAA8D,CAACwB;QACnE,OAAOpB,eAAeoB,WAAWnB,gBAAgBN;IACnD;IAEA,OAAO;QACL,GAAGS,UAAU;QACbN,MAAM;YACJA;YACAE;YACAC;YACAJ;YACAK;YACAN;QACF;IACF;AACF"}