{"version":3,"sources":["../src/hooks/useKeyboardResizing.ts"],"sourcesContent":["import * as React from 'react';\nimport { ArrowLeft, ArrowRight, Enter, Escape, Shift, Space } from '@fluentui/keyboard-keys';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport { ColumnResizeState, EnableKeyboardModeOnChangeCallback, TableColumnId } from './types';\nimport { useFocusFinders, useTabsterAttributes } from '@fluentui/react-tabster';\n\nconst STEP = 20;\nconst PRECISION_MODIFIER = Shift;\nconst PRECISION_FACTOR = 1 / 4;\n\nexport function useKeyboardResizing(columnResizeState: ColumnResizeState) {\n  const [columnId, setColumnId] = React.useState<TableColumnId>();\n  const onChangeRef = React.useRef<EnableKeyboardModeOnChangeCallback>();\n  const { findPrevFocusable } = useFocusFinders();\n\n  const columnResizeStateRef = React.useRef<ColumnResizeState>(columnResizeState);\n  React.useEffect(() => {\n    columnResizeStateRef.current = columnResizeState;\n  }, [columnResizeState]);\n\n  const [resizeHandleRefs] = React.useState(() => new Map<TableColumnId, React.RefObject<HTMLDivElement>>());\n\n  const keyboardHandler = useEventCallback((event: React.KeyboardEvent) => {\n    if (!columnId) {\n      return;\n    }\n\n    const width = columnResizeStateRef.current.getColumnWidth(columnId);\n    const precisionModifier = event.getModifierState(PRECISION_MODIFIER);\n\n    const stopEvent = () => {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    switch (event.key) {\n      case ArrowLeft:\n        stopEvent();\n        columnResizeStateRef.current.setColumnWidth(event.nativeEvent, {\n          columnId,\n          width: width - (precisionModifier ? STEP * PRECISION_FACTOR : STEP),\n        });\n        return;\n\n      case ArrowRight:\n        stopEvent();\n        columnResizeStateRef.current.setColumnWidth(event.nativeEvent, {\n          columnId,\n          width: width + (precisionModifier ? STEP * PRECISION_FACTOR : STEP),\n        });\n        return;\n\n      case Space:\n      case Enter:\n      case Escape:\n        stopEvent();\n        // Just blur here, the onBlur handler will take care of the rest (disableInteractiveMode).\n        resizeHandleRefs.get(columnId)?.current?.blur();\n        break;\n    }\n  });\n\n  const enableInteractiveMode = React.useCallback(\n    (colId: TableColumnId) => {\n      setColumnId(colId);\n      onChangeRef.current?.(colId, true);\n\n      const handle = resizeHandleRefs.get(colId)?.current;\n      if (handle) {\n        handle.setAttribute('tabindex', '-1');\n        handle.tabIndex = -1;\n        handle.focus();\n      }\n    },\n    [resizeHandleRefs],\n  );\n\n  const disableInteractiveMode = React.useCallback(() => {\n    if (!columnId) {\n      return;\n    }\n    // Notify the onChange listener that we are disabling interactive mode.\n    onChangeRef.current?.(columnId, false);\n    // Find the previous focusable element (table header button) and focus it.\n    const el = resizeHandleRefs.get(columnId)?.current;\n    if (el) {\n      findPrevFocusable(el)?.focus(); // Focus the previous focusable element (header button).\n      el.removeAttribute('tabindex');\n    }\n\n    setColumnId(undefined);\n  }, [columnId, findPrevFocusable, resizeHandleRefs]);\n\n  const toggleInteractiveMode = (colId: TableColumnId, onChange?: EnableKeyboardModeOnChangeCallback) => {\n    onChangeRef.current = onChange;\n    if (!columnId) {\n      enableInteractiveMode(colId);\n    } else if (colId && columnId !== colId) {\n      enableInteractiveMode(colId);\n      setColumnId(colId);\n    } else {\n      disableInteractiveMode();\n    }\n  };\n\n  const getKeyboardResizingRef = React.useCallback(\n    (colId: TableColumnId) => {\n      const ref = resizeHandleRefs.get(colId) || React.createRef<HTMLDivElement>();\n      resizeHandleRefs.set(colId, ref);\n      return ref;\n    },\n    [resizeHandleRefs],\n  );\n\n  // This makes sure the left and right arrow keys are ignored in tabster,\n  // so that they can be used for resizing.\n  const tabsterAttrs = useTabsterAttributes({\n    focusable: {\n      ignoreKeydown: {\n        ArrowLeft: true,\n        ArrowRight: true,\n      },\n    },\n  });\n\n  return {\n    toggleInteractiveMode,\n    columnId,\n    getKeyboardResizingProps: React.useCallback(\n      (colId: TableColumnId, currentWidth: number) => ({\n        onKeyDown: keyboardHandler,\n        onBlur: disableInteractiveMode,\n        ref: getKeyboardResizingRef(colId),\n        role: 'separator',\n        'aria-label': 'Resize column',\n        'aria-valuetext': `${currentWidth} pixels`,\n        'aria-hidden': colId === columnId ? false : true,\n        tabIndex: colId === columnId ? 0 : undefined,\n        ...tabsterAttrs,\n      }),\n      [columnId, disableInteractiveMode, getKeyboardResizingRef, keyboardHandler, tabsterAttrs],\n    ),\n  };\n}\n"],"names":["useKeyboardResizing","STEP","PRECISION_MODIFIER","Shift","PRECISION_FACTOR","columnResizeState","columnId","setColumnId","React","useState","onChangeRef","useRef","findPrevFocusable","useFocusFinders","columnResizeStateRef","useEffect","current","resizeHandleRefs","Map","keyboardHandler","useEventCallback","event","width","getColumnWidth","precisionModifier","getModifierState","stopEvent","preventDefault","stopPropagation","key","ArrowLeft","setColumnWidth","nativeEvent","ArrowRight","Space","Enter","Escape","get","blur","enableInteractiveMode","useCallback","colId","handle","setAttribute","tabIndex","focus","disableInteractiveMode","el","removeAttribute","undefined","toggleInteractiveMode","onChange","getKeyboardResizingRef","ref","createRef","set","tabsterAttrs","useTabsterAttributes","focusable","ignoreKeydown","getKeyboardResizingProps","currentWidth","onKeyDown","onBlur","role"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}