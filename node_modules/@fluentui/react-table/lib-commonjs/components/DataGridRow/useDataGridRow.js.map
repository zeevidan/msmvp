{"version":3,"sources":["../src/components/DataGridRow/useDataGridRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isInteractiveHTMLElement, useEventCallback, slot } from '@fluentui/react-utilities';\nimport { Space } from '@fluentui/keyboard-keys';\nimport type { DataGridRowProps, DataGridRowState } from './DataGridRow.types';\nimport { useTableRow_unstable } from '../TableRow/useTableRow';\nimport { dataGridContextDefaultValue, useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { DataGridSelectionCell } from '../DataGridSelectionCell/DataGridSelectionCell';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n\n/**\n * Create the state required to render DataGridRow.\n *\n * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,\n * before being passed to renderDataGridRow_unstable.\n *\n * @param props - props from this instance of DataGridRow\n * @param ref - reference to root HTMLElement of DataGridRow\n */\nexport const useDataGridRow_unstable = (props: DataGridRowProps, ref: React.Ref<HTMLElement>): DataGridRowState => {\n  const rowId = useTableRowIdContext();\n  const isHeader = useIsInTableHeader();\n  const columnDefs = useDataGridContext_unstable(ctx => ctx.columns);\n  const selectable = useDataGridContext_unstable(ctx => ctx.selectableRows);\n  const selected = useDataGridContext_unstable(ctx => ctx.selection.isRowSelected(rowId));\n  const focusMode = useDataGridContext_unstable(ctx => ctx.focusMode);\n  const compositeRowTabsterAttribute = useDataGridContext_unstable(ctx => ctx.compositeRowTabsterAttribute);\n\n  const tabbable = focusMode === 'row_unstable' || focusMode === 'composite';\n  const appearance = useDataGridContext_unstable(ctx => {\n    if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {\n      return ctx.selectionAppearance;\n    }\n\n    return 'none';\n  });\n  const toggleRow = useDataGridContext_unstable(ctx => ctx.selection.toggleRow);\n\n  const onClick = useEventCallback((e: React.MouseEvent<HTMLTableRowElement>) => {\n    if (selectable && !isHeader) {\n      toggleRow(e, rowId);\n    }\n\n    props.onClick?.(e);\n  });\n\n  const onKeyDown = useEventCallback((e: React.KeyboardEvent<HTMLTableRowElement>) => {\n    if (selectable && !isHeader && e.key === Space && !isInteractiveHTMLElement(e.target as HTMLElement)) {\n      // stop scrolling\n      e.preventDefault();\n      toggleRow(e, rowId);\n    }\n\n    props.onKeyDown?.(e);\n  });\n\n  const baseState = useTableRow_unstable(\n    {\n      appearance,\n      'aria-selected': selectable ? selected : undefined,\n      tabIndex: tabbable && !isHeader ? 0 : undefined,\n      ...(focusMode === 'composite' && !isHeader && compositeRowTabsterAttribute),\n      ...props,\n      onClick,\n      onKeyDown,\n      children: null,\n      as: 'div',\n    },\n    ref,\n  );\n\n  return {\n    ...baseState,\n    components: {\n      ...baseState.components,\n      selectionCell: DataGridSelectionCell,\n    },\n    selectionCell: slot.optional(props.selectionCell, {\n      renderByDefault: selectable,\n      elementType: DataGridSelectionCell,\n    }),\n    renderCell: props.children,\n    columnDefs,\n    // This context value should not be used internally\n    // It's intended to help power user render functions\n    dataGridContextValue: useStableDataGridContextValue(),\n  };\n};\n\nfunction useStableDataGridContextValue() {\n  const ref = React.useRef(dataGridContextDefaultValue);\n\n  // Heads up!\n  // We will not re-render when the context value changes, but we will have the latest value of the context when we do\n  // render for other reasons.\n  //\n  // This relies on a context selector that always returns the same value:\n  // - we will not re-render when the context value changes\n  // - we will store the context value in a ref\n  useDataGridContext_unstable(ctx => {\n    ref.current = ctx;\n    return null;\n  });\n\n  return ref.current!;\n}\n"],"names":["useDataGridRow_unstable","props","ref","rowId","useTableRowIdContext","isHeader","useIsInTableHeader","columnDefs","useDataGridContext_unstable","ctx","columns","selectable","selectableRows","selected","selection","isRowSelected","focusMode","compositeRowTabsterAttribute","tabbable","appearance","selectionAppearance","toggleRow","onClick","useEventCallback","e","onKeyDown","key","Space","isInteractiveHTMLElement","target","preventDefault","baseState","useTableRow_unstable","undefined","tabIndex","children","as","components","selectionCell","DataGridSelectionCell","slot","optional","renderByDefault","elementType","renderCell","dataGridContextValue","useStableDataGridContextValue","React","useRef","dataGridContextDefaultValue","current"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}