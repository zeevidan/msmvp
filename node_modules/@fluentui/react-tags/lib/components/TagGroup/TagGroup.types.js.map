{"version":3,"sources":["../src/components/TagGroup/TagGroup.types.ts"],"sourcesContent":["import type { ComponentProps, ComponentState, Slot, EventHandler } from '@fluentui/react-utilities';\nimport type {\n  TagSize,\n  TagValue,\n  TagDismissHandler,\n  TagAppearance,\n  TagSelectHandler,\n  TagSelectData,\n} from '../../utils/types';\nimport { TagGroupContextValue } from '../../contexts/tagGroupContext';\nimport * as React from 'react';\n\nexport type TagGroupContextValues = {\n  tagGroup: TagGroupContextValue;\n};\n\nexport type TagGroupSlots = {\n  root: Slot<'div'>;\n};\n\n/**\n * TagGroup Props\n */\nexport type TagGroupProps<Value = TagValue> = ComponentProps<TagGroupSlots> & {\n  /**\n   * Callback for when a tag is dismissed\n   */\n  // eslint-disable-next-line @nx/workspace-consistent-callback-type -- can't change type of existing callback\n  onDismiss?: TagDismissHandler<Value>;\n\n  /**\n   * Sets selected values for an uncontrolled component.\n   */\n  defaultSelectedValues?: Value[];\n\n  /**\n   * A TagGroup can show that it cannot be interacted with.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n\n  size?: TagSize;\n  appearance?: TagAppearance;\n  dismissible?: boolean;\n\n  /**\n   * Callback for when a tag is selected\n   */\n  onTagSelect?: EventHandler<TagSelectData<Value>>;\n\n  /**\n   * Values of the selected tags\n   */\n  selectedValues?: Value[];\n};\n\n/**\n * State used in rendering TagGroup\n */\nexport type TagGroupState<Value = TagValue> = ComponentState<TagGroupSlots> &\n  Required<Pick<TagGroupProps, 'appearance' | 'dismissible' | 'disabled' | 'size' | 'selectedValues'>> & {\n    handleTagDismiss: TagDismissHandler<Value>;\n    handleTagSelect?: TagSelectHandler<Value>;\n    role?: React.AriaRole;\n  };\n"],"names":["React"],"rangeMappings":"","mappings":"AAUA,YAAYA,WAAW,QAAQ"}