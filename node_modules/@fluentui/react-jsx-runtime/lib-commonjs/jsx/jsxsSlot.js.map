{"version":3,"sources":["../src/jsx/jsxsSlot.ts"],"sourcesContent":["import * as React from 'react';\nimport { SlotComponentType, UnknownSlotProps } from '@fluentui/react-utilities';\nimport { getMetadataFromSlotComponent } from '../utils/getMetadataFromSlotComponent';\nimport { Runtime } from '../utils/Runtime';\n\nexport const jsxsSlot = <Props extends UnknownSlotProps>(\n  type: SlotComponentType<Props>,\n  overrideProps: Props | null,\n  key?: React.Key,\n): React.ReactElement<Props> => {\n  const { elementType, renderFunction, props: slotProps } = getMetadataFromSlotComponent(type);\n\n  const props: Props = { ...slotProps, ...overrideProps };\n\n  if (renderFunction) {\n    /**\n     * In static runtime then children is an array and this array won't be keyed.\n     * We should wrap children by a static fragment\n     * as there's no way to know if renderFunction will render statically or dynamically\n     */\n    return Runtime.jsx(\n      React.Fragment,\n      {\n        children: renderFunction(elementType, {\n          ...props,\n          children: Runtime.jsxs(React.Fragment, { children: props.children }, undefined),\n        }),\n      },\n      key,\n    ) as React.ReactElement<Props>;\n  }\n  return Runtime.jsxs(elementType, props, key);\n};\n"],"names":["jsxsSlot","type","overrideProps","key","elementType","renderFunction","props","slotProps","getMetadataFromSlotComponent","Runtime","jsx","React","Fragment","children","jsxs","undefined"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAKaA;;;eAAAA;;;;iEALU;8CAEsB;yBACrB;AAEjB,MAAMA,WAAW,CACtBC,MACAC,eACAC;IAEA,MAAM,EAAEC,WAAW,EAAEC,cAAc,EAAEC,OAAOC,SAAS,EAAE,GAAGC,IAAAA,0DAA4B,EAACP;IAEvF,MAAMK,QAAe;QAAE,GAAGC,SAAS;QAAE,GAAGL,aAAa;IAAC;IAEtD,IAAIG,gBAAgB;QAClB;;;;KAIC,GACD,OAAOI,gBAAO,CAACC,GAAG,CAChBC,OAAMC,QAAQ,EACd;YACEC,UAAUR,eAAeD,aAAa;gBACpC,GAAGE,KAAK;gBACRO,UAAUJ,gBAAO,CAACK,IAAI,CAACH,OAAMC,QAAQ,EAAE;oBAAEC,UAAUP,MAAMO,QAAQ;gBAAC,GAAGE;YACvE;QACF,GACAZ;IAEJ;IACA,OAAOM,gBAAO,CAACK,IAAI,CAACV,aAAaE,OAAOH;AAC1C"}