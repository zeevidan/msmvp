{"version":3,"sources":["../src/utils/getChildElement.ts"],"sourcesContent":["import * as React from 'react';\nimport * as ReactIs from 'react-is';\n\nexport function getChildElement(children: React.ReactElement) {\n  try {\n    const child = React.Children.only(children) as React.ReactElement & { ref: React.Ref<HTMLElement> };\n\n    if (typeof child.type === 'string' || ReactIs.isForwardRef(child)) {\n      return child as React.ReactElement & { ref: React.Ref<HTMLElement> };\n    }\n\n    // We don't need to do anything here: we catch the exception from React to throw a more meaningful error\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  throw new Error(\n    [\n      '@fluentui/react-motion: Invalid child element.',\n      '\\n',\n      'Motion factories require a single child element to be passed. ',\n      'That element element should support ref forwarding i.e. it should be either an intrinsic element (e.g. div) or a component that uses React.forwardRef().',\n    ].join(''),\n  );\n}\n"],"names":["React","ReactIs","getChildElement","children","child","Children","only","type","isForwardRef","Error","join"],"rangeMappings":";;;;;;;;;;;;;;;;;","mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,YAAYC,aAAa,WAAW;AAEpC,OAAO,SAASC,gBAAgBC,QAA4B;IAC1D,IAAI;QACF,MAAMC,QAAQJ,MAAMK,QAAQ,CAACC,IAAI,CAACH;QAElC,IAAI,OAAOC,MAAMG,IAAI,KAAK,YAAYN,QAAQO,YAAY,CAACJ,QAAQ;YACjE,OAAOA;QACT;IAEA,wGAAwG;IACxG,oCAAoC;IACtC,EAAE,OAAM,CAAC;IAET,MAAM,IAAIK,MACR;QACE;QACA;QACA;QACA;KACD,CAACC,IAAI,CAAC;AAEX"}