{"version":3,"sources":["usePersonaStyles.styles.js"],"sourcesContent":["import { makeResetStyles, makeStyles, mergeClasses } from '@griffel/react';\nimport { tokens, typographyStyles } from '@fluentui/react-theme';\nexport const personaClassNames = {\n    root: 'fui-Persona',\n    avatar: 'fui-Persona__avatar',\n    presence: 'fui-Persona__presence',\n    primaryText: 'fui-Persona__primaryText',\n    secondaryText: 'fui-Persona__secondaryText',\n    tertiaryText: 'fui-Persona__tertiaryText',\n    quaternaryText: 'fui-Persona__quaternaryText'\n};\nconst avatarSpacing = `--fui-Persona__avatar--spacing`;\nconst useRootClassName = makeResetStyles({\n    display: 'inline-grid',\n    gridAutoRows: 'max-content',\n    gridAutoFlow: 'column',\n    justifyItems: 'start',\n    gridTemplateColumns: 'max-content [middle] auto'\n});\n/**\n * Styles for the root slot\n */ const useStyles = makeStyles({\n    beforeAfterCenter: {\n        // This template is needed to make sure the Avatar is centered when it takes up more space than the text lines\n        gridTemplateRows: '1fr [primary] max-content [secondary] max-content [tertiary] max-content [quaternary] max-content 1fr'\n    },\n    after: {\n    },\n    before: {\n        justifyItems: 'end',\n        gridTemplateColumns: 'auto [middle] max-content'\n    },\n    below: {\n        gridAutoFlow: 'unset',\n        justifyItems: 'center',\n        gridTemplateColumns: 'unset'\n    },\n    media: {\n        gridRowStart: 'span 5'\n    },\n    mediaBeforeAfterCenter: {\n        gridRowStart: 'span 6'\n    },\n    start: {\n        alignSelf: 'start'\n    },\n    center: {\n        alignSelf: 'center'\n    },\n    afterAlignToPrimary: {\n        alignSelf: 'center',\n        gridRowStart: 'unset',\n        gridColumnEnd: 'middle'\n    },\n    beforeAlignToPrimary: {\n        alignSelf: 'center',\n        gridRowStart: 'unset',\n        gridColumnStart: 'middle'\n    },\n    secondLineSpacing: {\n        marginTop: '-2px'\n    },\n    primary: {\n        gridRowStart: 'primary'\n    },\n    secondary: {\n        gridRowStart: 'secondary'\n    },\n    tertiary: {\n        gridRowStart: 'tertiary'\n    },\n    quaternary: {\n        gridRowStart: 'quaternary'\n    }\n});\nconst useAvatarSpacingStyles = makeStyles({\n    'extra-small': {\n        [avatarSpacing]: tokens.spacingHorizontalSNudge\n    },\n    small: {\n        [avatarSpacing]: tokens.spacingHorizontalS\n    },\n    medium: {\n        [avatarSpacing]: tokens.spacingHorizontalS\n    },\n    large: {\n        [avatarSpacing]: tokens.spacingHorizontalMNudge\n    },\n    'extra-large': {\n        [avatarSpacing]: tokens.spacingHorizontalMNudge\n    },\n    huge: {\n        [avatarSpacing]: tokens.spacingHorizontalM\n    },\n    after: {\n        marginRight: `var(${avatarSpacing})`\n    },\n    below: {\n        marginBottom: `var(${avatarSpacing})`\n    },\n    before: {\n        marginLeft: `var(${avatarSpacing})`\n    }\n});\nconst usePresenceSpacingStyles = makeStyles({\n    small: {\n        [avatarSpacing]: tokens.spacingHorizontalSNudge\n    }\n});\n/**\n * Apply styling to the Persona slots based on the state\n */ export const usePersonaStyles_unstable = (state)=>{\n    'use no memo';\n    const { presenceOnly, size, textAlignment, textPosition } = state;\n    const alignToPrimary = presenceOnly && textAlignment === 'start' && size !== 'extra-large' && size !== 'huge';\n    const alignBeforeAfterCenter = textPosition !== 'below' && textAlignment === 'center';\n    const { primaryTextClassName, optionalTextClassName } = useTextClassNames(state, alignToPrimary);\n    const rootClassName = useRootClassName();\n    const styles = useStyles();\n    const avatarSpacingStyles = useAvatarSpacingStyles();\n    const presenceSpacingStyles = {\n        ...avatarSpacingStyles,\n        ...usePresenceSpacingStyles()\n    };\n    state.root.className = mergeClasses(personaClassNames.root, rootClassName, alignBeforeAfterCenter && styles.beforeAfterCenter, styles[textPosition], state.root.className);\n    if (state.avatar) {\n        state.avatar.className = mergeClasses(personaClassNames.avatar, textPosition !== 'below' && styles.media, alignBeforeAfterCenter && styles.mediaBeforeAfterCenter, styles[textAlignment], avatarSpacingStyles[size], avatarSpacingStyles[textPosition], state.avatar.className);\n    }\n    if (state.presence) {\n        state.presence.className = mergeClasses(personaClassNames.presence, textPosition !== 'below' && styles.media, alignBeforeAfterCenter && styles.mediaBeforeAfterCenter, styles[textAlignment], presenceSpacingStyles[size], presenceSpacingStyles[textPosition], textPosition === 'after' && alignToPrimary && styles.afterAlignToPrimary, textPosition === 'before' && alignToPrimary && styles.beforeAlignToPrimary, state.presence.className);\n    }\n    if (state.primaryText) {\n        state.primaryText.className = mergeClasses(personaClassNames.primaryText, alignBeforeAfterCenter && styles.primary, primaryTextClassName, state.primaryText.className);\n    }\n    if (state.secondaryText) {\n        state.secondaryText.className = mergeClasses(personaClassNames.secondaryText, alignBeforeAfterCenter && styles.secondary, optionalTextClassName, styles.secondLineSpacing, state.secondaryText.className);\n    }\n    if (state.tertiaryText) {\n        state.tertiaryText.className = mergeClasses(personaClassNames.tertiaryText, alignBeforeAfterCenter && styles.tertiary, optionalTextClassName, state.tertiaryText.className);\n    }\n    if (state.quaternaryText) {\n        state.quaternaryText.className = mergeClasses(personaClassNames.quaternaryText, alignBeforeAfterCenter && styles.quaternary, optionalTextClassName, state.quaternaryText.className);\n    }\n    return state;\n};\nconst usePrimaryTextBaseClassName = makeResetStyles({\n    display: 'block',\n    color: tokens.colorNeutralForeground1,\n    ...typographyStyles.body1\n});\nconst useOptionalTextBaseClassName = makeResetStyles({\n    display: 'block',\n    color: tokens.colorNeutralForeground2,\n    ...typographyStyles.caption1\n});\nconst useTextStyles = makeStyles({\n    beforeAlignToPrimary: {\n        gridColumnEnd: 'middle'\n    },\n    afterAlignToPrimary: {\n        gridColumnStart: 'middle'\n    },\n    body1: typographyStyles.body1,\n    caption1: typographyStyles.caption1,\n    subtitle2: typographyStyles.subtitle2\n});\nconst useTextClassNames = (state, alignToPrimary)=>{\n    const { presenceOnly, size, textPosition } = state;\n    const primaryTextBaseClassName = usePrimaryTextBaseClassName();\n    const optionalTextBaseClassName = useOptionalTextBaseClassName();\n    const textStyles = useTextStyles();\n    let primaryTextSize;\n    let alignToPrimaryClassName;\n    if (presenceOnly) {\n        if (size === 'extra-small') {\n            primaryTextSize = state.numTextLines <= 1 && textStyles.caption1;\n        } else if (size === 'extra-large' || size === 'huge') {\n            primaryTextSize = textStyles.subtitle2;\n        }\n        if (alignToPrimary) {\n            if (textPosition === 'before') {\n                alignToPrimaryClassName = textStyles.beforeAlignToPrimary;\n            } else if (textPosition === 'after') {\n                alignToPrimaryClassName = textStyles.afterAlignToPrimary;\n            }\n        }\n    } else {\n        if (size === 'huge') {\n            primaryTextSize = textStyles.subtitle2;\n        } else if (size === 'extra-large') {\n            primaryTextSize = textStyles.subtitle2;\n        }\n    }\n    return {\n        primaryTextClassName: mergeClasses(primaryTextBaseClassName, primaryTextSize, alignToPrimaryClassName),\n        optionalTextClassName: mergeClasses(optionalTextBaseClassName, !presenceOnly && size === 'huge' && textStyles.body1, alignToPrimaryClassName)\n    };\n};\n"],"names":["personaClassNames","usePersonaStyles_unstable","root","avatar","presence","primaryText","secondaryText","tertiaryText","quaternaryText","avatarSpacing","useRootClassName","__resetStyles","useStyles","__styles","beforeAfterCenter","wkccdc","after","before","B7hvi0a","Budl1dq","below","Bxotwcr","media","Ijaq50","mediaBeforeAfterCenter","start","qb2dma","center","afterAlignToPrimary","Bw0ie65","beforeAlignToPrimary","Br312pm","secondLineSpacing","B6of3ja","primary","secondary","tertiary","quaternary","d","useAvatarSpacingStyles","Bs1gm4r","small","medium","large","huge","t21cq0","jrapky","Frg6f3","usePresenceSpacingStyles","state","presenceOnly","size","textAlignment","textPosition","alignToPrimary","alignBeforeAfterCenter","primaryTextClassName","optionalTextClassName","useTextClassNames","rootClassName","styles","avatarSpacingStyles","presenceSpacingStyles","className","mergeClasses","usePrimaryTextBaseClassName","useOptionalTextBaseClassName","useTextStyles","body1","Bahqtrf","Be2twd7","Bhrd7zp","Bg96gwp","caption1","subtitle2","primaryTextBaseClassName","optionalTextBaseClassName","textStyles","primaryTextSize","alignToPrimaryClassName","numTextLines"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}