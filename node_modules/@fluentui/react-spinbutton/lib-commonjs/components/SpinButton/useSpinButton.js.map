{"version":3,"sources":["../src/components/SpinButton/useSpinButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport {\n  getPartitionedNativeProps,\n  mergeCallbacks,\n  useControllableState,\n  useTimeout,\n  slot,\n  useMergedRefs,\n} from '@fluentui/react-utilities';\nimport { ArrowUp, ArrowDown, End, Enter, Escape, Home, PageDown, PageUp } from '@fluentui/keyboard-keys';\nimport {\n  SpinButtonProps,\n  SpinButtonState,\n  SpinButtonSpinState,\n  SpinButtonChangeEvent,\n  SpinButtonBounds,\n} from './SpinButton.types';\nimport { calculatePrecision, precisionRound, getBound, clamp } from '../../utils/index';\nimport { ChevronUp16Regular, ChevronDown16Regular } from '@fluentui/react-icons';\nimport { useOverrides_unstable as useOverrides } from '@fluentui/react-shared-contexts';\n\ntype InternalState = {\n  value: number | null;\n  spinState: SpinButtonSpinState;\n  spinTime: number;\n  spinDelay: number;\n  previousTextValue?: string;\n  atBound: SpinButtonBounds;\n};\n\nconst DEFAULT_SPIN_DELAY_MS = 150;\nconst MIN_SPIN_DELAY_MS = 80;\nconst MAX_SPIN_TIME_MS = 1000;\n\n// This is here to give an ease for the mouse held down case.\n// Exact easing it to be defined. Once it is we'll likely\n// pull this out into a util function in the SpinButton package.\nconst lerp = (start: number, end: number, percent: number): number => start + (end - start) * percent;\n\n/**\n * Create the state required to render SpinButton.\n *\n * The returned state can be modified with hooks such as useSpinButtonStyles_unstable,\n * before being passed to renderSpinButton_unstable.\n *\n * @param props - props from this instance of SpinButton\n * @param ref - reference to root HTMLElement of SpinButton\n */\nexport const useSpinButton_unstable = (props: SpinButtonProps, ref: React.Ref<HTMLInputElement>): SpinButtonState => {\n  // Merge props from surrounding <Field>, if any\n  props = useFieldControlProps_unstable(props, { supportsLabelFor: true, supportsRequired: true });\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['defaultValue', 'max', 'min', 'onChange', 'size', 'value'],\n  });\n\n  const overrides = useOverrides();\n\n  const {\n    value,\n    displayValue,\n    defaultValue,\n    min,\n    max,\n    step = 1,\n    stepPage = 1,\n    precision: precisionFromProps,\n    onChange,\n    size = 'medium',\n    appearance = overrides.inputDefaultAppearance ?? 'outline',\n    root,\n    input,\n    incrementButton,\n    decrementButton,\n  } = props;\n\n  const precision = React.useMemo(() => {\n    return precisionFromProps ?? Math.max(calculatePrecision(step), 0);\n  }, [precisionFromProps, step]);\n\n  const [currentValue, setCurrentValue] = useControllableState({\n    state: value,\n    defaultState: defaultValue,\n    initialState: 0,\n  });\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const isControlled = value !== undefined;\n\n  const [textValue, setTextValue] = React.useState<string | undefined>(undefined);\n  const [keyboardSpinState, setKeyboardSpinState] = React.useState<SpinButtonSpinState>('rest');\n\n  const internalState = React.useRef<InternalState>({\n    value: currentValue,\n    spinState: 'rest',\n    spinTime: 0,\n    spinDelay: DEFAULT_SPIN_DELAY_MS,\n    atBound: currentValue !== null ? getBound(precisionRound(currentValue, precision), min, max) : 'none',\n  });\n\n  const [setStepTimeout, clearStepTimeout] = useTimeout();\n\n  const stepValue = (\n    e: SpinButtonChangeEvent,\n    direction: 'up' | 'down' | 'upPage' | 'downPage',\n    startFrom?: string,\n  ) => {\n    let startValue = internalState.current.value;\n    if (startFrom) {\n      const num = parseFloat(startFrom);\n      if (!isNaN(num)) {\n        startValue = num;\n      }\n    }\n    const val = startValue;\n    const dir = direction === 'up' || direction === 'upPage' ? 1 : -1;\n    const stepSize = direction === 'upPage' || direction === 'downPage' ? stepPage : step;\n\n    if (val === null) {\n      const stepStart = min === undefined ? 0 : min;\n      const nullStep = clamp(stepStart + stepSize * dir, min, max);\n      commit(e, nullStep);\n      return;\n    }\n\n    let newValue = val + stepSize * dir;\n    if (!Number.isNaN(newValue)) {\n      newValue = clamp(newValue, min, max);\n    }\n\n    commit(e, newValue);\n\n    if (internalState.current.spinState !== 'rest') {\n      setStepTimeout(() => {\n        // Ease the step speed a bit\n        internalState.current.spinTime += internalState.current.spinDelay;\n        internalState.current.spinDelay = lerp(\n          DEFAULT_SPIN_DELAY_MS,\n          MIN_SPIN_DELAY_MS,\n          internalState.current.spinTime / MAX_SPIN_TIME_MS,\n        );\n        stepValue(e, direction);\n      }, internalState.current.spinDelay);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!internalState.current.previousTextValue) {\n      internalState.current.previousTextValue = textValue ?? String(currentValue);\n    }\n    const newValue = e.target.value;\n    setTextValue(newValue);\n    if (inputRef.current) {\n      // we need to set this here using the IDL attribute directly, because otherwise the timing of the ARIA value update\n      // is not in sync with the user-entered native input value, and some screen readers end up reading the wrong value.\n      inputRef.current.ariaValueNow = newValue;\n    }\n  };\n\n  const handleIncrementMouseDown = (e: React.MouseEvent<HTMLButtonElement>) => {\n    commit(e, currentValue, textValue);\n    internalState.current.spinState = 'up';\n    stepValue(e, 'up');\n  };\n\n  const handleDecrementMouseDown = (e: React.MouseEvent<HTMLButtonElement>) => {\n    commit(e, currentValue, textValue);\n    internalState.current.spinState = 'down';\n    stepValue(e, 'down');\n  };\n\n  const handleStepMouseUpOrLeave = (e: React.MouseEvent<HTMLButtonElement>) => {\n    clearStepTimeout();\n    internalState.current.spinState = 'rest';\n    internalState.current.spinDelay = DEFAULT_SPIN_DELAY_MS;\n    internalState.current.spinTime = 0;\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    commit(e, currentValue, textValue);\n    internalState.current.previousTextValue = undefined;\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    let nextKeyboardSpinState: SpinButtonSpinState = 'rest';\n\n    if (e.key === ArrowUp) {\n      stepValue(e, 'up', textValue);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === ArrowDown) {\n      stepValue(e, 'down', textValue);\n      nextKeyboardSpinState = 'down';\n    } else if (e.key === PageUp) {\n      e.preventDefault();\n      stepValue(e, 'upPage', textValue);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === PageDown) {\n      e.preventDefault();\n      stepValue(e, 'downPage', textValue);\n      nextKeyboardSpinState = 'down';\n    } else if (!e.shiftKey && e.key === Home && min !== undefined) {\n      commit(e, min);\n      nextKeyboardSpinState = 'down';\n    } else if (!e.shiftKey && e.key === End && max !== undefined) {\n      commit(e, max);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === Enter) {\n      commit(e, currentValue, textValue);\n      internalState.current.previousTextValue = undefined;\n    } else if (e.key === Escape) {\n      if (internalState.current.previousTextValue) {\n        setTextValue(undefined);\n        internalState.current.previousTextValue = undefined;\n      }\n    }\n\n    if (keyboardSpinState !== nextKeyboardSpinState) {\n      setKeyboardSpinState(nextKeyboardSpinState);\n    }\n  };\n\n  const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (keyboardSpinState !== 'rest') {\n      setKeyboardSpinState('rest');\n      internalState.current.spinState = 'rest';\n    }\n  };\n\n  const commit = (e: SpinButtonChangeEvent, newValue?: number | null, newDisplayValue?: string) => {\n    const valueChanged = newValue !== undefined && currentValue !== newValue;\n    const displayValueChanged =\n      newDisplayValue !== undefined &&\n      internalState.current.previousTextValue !== undefined &&\n      internalState.current.previousTextValue !== newDisplayValue;\n\n    let roundedValue;\n    if (valueChanged) {\n      roundedValue = precisionRound(newValue!, precision);\n      setCurrentValue(roundedValue);\n      internalState.current.value = roundedValue;\n    } else if (displayValueChanged && !isControlled) {\n      const nextValue = parseFloat(newDisplayValue as string);\n      if (!isNaN(nextValue)) {\n        setCurrentValue(precisionRound(nextValue, precision));\n        internalState.current.value = precisionRound(nextValue, precision);\n      }\n    }\n\n    if (valueChanged || displayValueChanged) {\n      onChange?.(e, { value: roundedValue, displayValue: newDisplayValue });\n    }\n\n    setTextValue(undefined);\n  };\n\n  let valueToDisplay;\n  if (textValue !== undefined) {\n    valueToDisplay = textValue;\n  } else if (value === null || currentValue === null) {\n    valueToDisplay = displayValue ?? '';\n    internalState.current.value = null;\n    internalState.current.atBound = 'none';\n  } else {\n    const roundedValue = precisionRound(currentValue, precision);\n    internalState.current.value = roundedValue;\n    internalState.current.atBound = getBound(roundedValue, min, max);\n    if (isControlled) {\n      valueToDisplay = displayValue ?? String(roundedValue);\n    } else {\n      valueToDisplay = String(roundedValue);\n    }\n  }\n\n  const state: SpinButtonState = {\n    size,\n    appearance,\n    spinState: keyboardSpinState,\n    atBound: internalState.current.atBound,\n\n    components: {\n      root: 'span',\n      input: 'input',\n      incrementButton: 'button',\n      decrementButton: 'button',\n    },\n    root: slot.always(root, {\n      defaultProps: nativeProps.root,\n      elementType: 'span',\n    }),\n    input: slot.always(input, {\n      defaultProps: {\n        autoComplete: 'off',\n        role: 'spinbutton',\n        appearance,\n        type: 'text',\n        ...nativeProps.primary,\n      },\n      elementType: 'input',\n    }),\n    incrementButton: slot.always(incrementButton, {\n      defaultProps: {\n        tabIndex: -1,\n        children: <ChevronUp16Regular />,\n        disabled:\n          nativeProps.primary.disabled ||\n          internalState.current.atBound === 'max' ||\n          internalState.current.atBound === 'both',\n        'aria-label': 'Increment value',\n        type: 'button',\n      },\n      elementType: 'button',\n    }),\n    decrementButton: slot.always(decrementButton, {\n      defaultProps: {\n        tabIndex: -1,\n        children: <ChevronDown16Regular />,\n        disabled:\n          nativeProps.primary.disabled ||\n          internalState.current.atBound === 'min' ||\n          internalState.current.atBound === 'both',\n        'aria-label': 'Decrement value',\n        type: 'button',\n      },\n      elementType: 'button',\n    }),\n  };\n\n  state.input.value = valueToDisplay;\n  state.input.ref = useMergedRefs(inputRef, ref);\n  state.input['aria-valuemin'] = min;\n  state.input['aria-valuemax'] = max;\n  state.input['aria-valuenow'] = internalState.current.value ?? undefined;\n  state.input['aria-valuetext'] = state.input['aria-valuetext'] ?? ((value !== undefined && displayValue) || undefined);\n  state.input.onChange = mergeCallbacks(state.input.onChange, handleInputChange);\n  state.input.onInput = mergeCallbacks(state.input.onInput, handleInputChange);\n  state.input.onBlur = mergeCallbacks(state.input.onBlur, handleBlur);\n  state.input.onKeyDown = mergeCallbacks(state.input.onKeyDown, handleKeyDown);\n  state.input.onKeyUp = mergeCallbacks(state.input.onKeyUp, handleKeyUp);\n\n  state.incrementButton.onMouseDown = mergeCallbacks(handleIncrementMouseDown, state.incrementButton.onMouseDown);\n  state.incrementButton.onMouseUp = mergeCallbacks(state.incrementButton.onMouseUp, handleStepMouseUpOrLeave);\n  state.incrementButton.onMouseLeave = mergeCallbacks(state.incrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n\n  state.decrementButton.onMouseDown = mergeCallbacks(handleDecrementMouseDown, state.decrementButton.onMouseDown);\n  state.decrementButton.onMouseUp = mergeCallbacks(state.decrementButton.onMouseUp, handleStepMouseUpOrLeave);\n  state.decrementButton.onMouseLeave = mergeCallbacks(state.decrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n\n  return state;\n};\n"],"names":["useSpinButton_unstable","DEFAULT_SPIN_DELAY_MS","MIN_SPIN_DELAY_MS","MAX_SPIN_TIME_MS","lerp","start","end","percent","props","ref","useFieldControlProps_unstable","supportsLabelFor","supportsRequired","nativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","overrides","useOverrides","value","displayValue","defaultValue","min","max","step","stepPage","precision","precisionFromProps","onChange","size","appearance","inputDefaultAppearance","root","input","incrementButton","decrementButton","React","useMemo","Math","calculatePrecision","currentValue","setCurrentValue","useControllableState","state","defaultState","initialState","inputRef","useRef","isControlled","undefined","textValue","setTextValue","useState","keyboardSpinState","setKeyboardSpinState","internalState","spinState","spinTime","spinDelay","atBound","getBound","precisionRound","setStepTimeout","clearStepTimeout","useTimeout","stepValue","e","direction","startFrom","startValue","current","num","parseFloat","isNaN","val","dir","stepSize","stepStart","nullStep","clamp","commit","newValue","Number","handleInputChange","previousTextValue","String","target","ariaValueNow","handleIncrementMouseDown","handleDecrementMouseDown","handleStepMouseUpOrLeave","handleBlur","handleKeyDown","nextKeyboardSpinState","key","ArrowUp","ArrowDown","PageUp","preventDefault","PageDown","shiftKey","Home","End","Enter","Escape","handleKeyUp","newDisplayValue","valueChanged","displayValueChanged","roundedValue","nextValue","valueToDisplay","components","slot","always","defaultProps","elementType","autoComplete","role","type","primary","tabIndex","children","createElement","ChevronUp16Regular","disabled","ChevronDown16Regular","useMergedRefs","mergeCallbacks","onInput","onBlur","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onMouseLeave"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}