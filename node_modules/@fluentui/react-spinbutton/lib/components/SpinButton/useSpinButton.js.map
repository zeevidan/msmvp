{"version":3,"sources":["../src/components/SpinButton/useSpinButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport {\n  getPartitionedNativeProps,\n  mergeCallbacks,\n  useControllableState,\n  useTimeout,\n  slot,\n  useMergedRefs,\n} from '@fluentui/react-utilities';\nimport { ArrowUp, ArrowDown, End, Enter, Escape, Home, PageDown, PageUp } from '@fluentui/keyboard-keys';\nimport {\n  SpinButtonProps,\n  SpinButtonState,\n  SpinButtonSpinState,\n  SpinButtonChangeEvent,\n  SpinButtonBounds,\n} from './SpinButton.types';\nimport { calculatePrecision, precisionRound, getBound, clamp } from '../../utils/index';\nimport { ChevronUp16Regular, ChevronDown16Regular } from '@fluentui/react-icons';\nimport { useOverrides_unstable as useOverrides } from '@fluentui/react-shared-contexts';\n\ntype InternalState = {\n  value: number | null;\n  spinState: SpinButtonSpinState;\n  spinTime: number;\n  spinDelay: number;\n  previousTextValue?: string;\n  atBound: SpinButtonBounds;\n};\n\nconst DEFAULT_SPIN_DELAY_MS = 150;\nconst MIN_SPIN_DELAY_MS = 80;\nconst MAX_SPIN_TIME_MS = 1000;\n\n// This is here to give an ease for the mouse held down case.\n// Exact easing it to be defined. Once it is we'll likely\n// pull this out into a util function in the SpinButton package.\nconst lerp = (start: number, end: number, percent: number): number => start + (end - start) * percent;\n\n/**\n * Create the state required to render SpinButton.\n *\n * The returned state can be modified with hooks such as useSpinButtonStyles_unstable,\n * before being passed to renderSpinButton_unstable.\n *\n * @param props - props from this instance of SpinButton\n * @param ref - reference to root HTMLElement of SpinButton\n */\nexport const useSpinButton_unstable = (props: SpinButtonProps, ref: React.Ref<HTMLInputElement>): SpinButtonState => {\n  // Merge props from surrounding <Field>, if any\n  props = useFieldControlProps_unstable(props, { supportsLabelFor: true, supportsRequired: true });\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['defaultValue', 'max', 'min', 'onChange', 'size', 'value'],\n  });\n\n  const overrides = useOverrides();\n\n  const {\n    value,\n    displayValue,\n    defaultValue,\n    min,\n    max,\n    step = 1,\n    stepPage = 1,\n    precision: precisionFromProps,\n    onChange,\n    size = 'medium',\n    appearance = overrides.inputDefaultAppearance ?? 'outline',\n    root,\n    input,\n    incrementButton,\n    decrementButton,\n  } = props;\n\n  const precision = React.useMemo(() => {\n    return precisionFromProps ?? Math.max(calculatePrecision(step), 0);\n  }, [precisionFromProps, step]);\n\n  const [currentValue, setCurrentValue] = useControllableState({\n    state: value,\n    defaultState: defaultValue,\n    initialState: 0,\n  });\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const isControlled = value !== undefined;\n\n  const [textValue, setTextValue] = React.useState<string | undefined>(undefined);\n  const [keyboardSpinState, setKeyboardSpinState] = React.useState<SpinButtonSpinState>('rest');\n\n  const internalState = React.useRef<InternalState>({\n    value: currentValue,\n    spinState: 'rest',\n    spinTime: 0,\n    spinDelay: DEFAULT_SPIN_DELAY_MS,\n    atBound: currentValue !== null ? getBound(precisionRound(currentValue, precision), min, max) : 'none',\n  });\n\n  const [setStepTimeout, clearStepTimeout] = useTimeout();\n\n  const stepValue = (\n    e: SpinButtonChangeEvent,\n    direction: 'up' | 'down' | 'upPage' | 'downPage',\n    startFrom?: string,\n  ) => {\n    let startValue = internalState.current.value;\n    if (startFrom) {\n      const num = parseFloat(startFrom);\n      if (!isNaN(num)) {\n        startValue = num;\n      }\n    }\n    const val = startValue;\n    const dir = direction === 'up' || direction === 'upPage' ? 1 : -1;\n    const stepSize = direction === 'upPage' || direction === 'downPage' ? stepPage : step;\n\n    if (val === null) {\n      const stepStart = min === undefined ? 0 : min;\n      const nullStep = clamp(stepStart + stepSize * dir, min, max);\n      commit(e, nullStep);\n      return;\n    }\n\n    let newValue = val + stepSize * dir;\n    if (!Number.isNaN(newValue)) {\n      newValue = clamp(newValue, min, max);\n    }\n\n    commit(e, newValue);\n\n    if (internalState.current.spinState !== 'rest') {\n      setStepTimeout(() => {\n        // Ease the step speed a bit\n        internalState.current.spinTime += internalState.current.spinDelay;\n        internalState.current.spinDelay = lerp(\n          DEFAULT_SPIN_DELAY_MS,\n          MIN_SPIN_DELAY_MS,\n          internalState.current.spinTime / MAX_SPIN_TIME_MS,\n        );\n        stepValue(e, direction);\n      }, internalState.current.spinDelay);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!internalState.current.previousTextValue) {\n      internalState.current.previousTextValue = textValue ?? String(currentValue);\n    }\n    const newValue = e.target.value;\n    setTextValue(newValue);\n    if (inputRef.current) {\n      // we need to set this here using the IDL attribute directly, because otherwise the timing of the ARIA value update\n      // is not in sync with the user-entered native input value, and some screen readers end up reading the wrong value.\n      inputRef.current.ariaValueNow = newValue;\n    }\n  };\n\n  const handleIncrementMouseDown = (e: React.MouseEvent<HTMLButtonElement>) => {\n    commit(e, currentValue, textValue);\n    internalState.current.spinState = 'up';\n    stepValue(e, 'up');\n  };\n\n  const handleDecrementMouseDown = (e: React.MouseEvent<HTMLButtonElement>) => {\n    commit(e, currentValue, textValue);\n    internalState.current.spinState = 'down';\n    stepValue(e, 'down');\n  };\n\n  const handleStepMouseUpOrLeave = (e: React.MouseEvent<HTMLButtonElement>) => {\n    clearStepTimeout();\n    internalState.current.spinState = 'rest';\n    internalState.current.spinDelay = DEFAULT_SPIN_DELAY_MS;\n    internalState.current.spinTime = 0;\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    commit(e, currentValue, textValue);\n    internalState.current.previousTextValue = undefined;\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    let nextKeyboardSpinState: SpinButtonSpinState = 'rest';\n\n    if (e.key === ArrowUp) {\n      stepValue(e, 'up', textValue);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === ArrowDown) {\n      stepValue(e, 'down', textValue);\n      nextKeyboardSpinState = 'down';\n    } else if (e.key === PageUp) {\n      e.preventDefault();\n      stepValue(e, 'upPage', textValue);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === PageDown) {\n      e.preventDefault();\n      stepValue(e, 'downPage', textValue);\n      nextKeyboardSpinState = 'down';\n    } else if (!e.shiftKey && e.key === Home && min !== undefined) {\n      commit(e, min);\n      nextKeyboardSpinState = 'down';\n    } else if (!e.shiftKey && e.key === End && max !== undefined) {\n      commit(e, max);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === Enter) {\n      commit(e, currentValue, textValue);\n      internalState.current.previousTextValue = undefined;\n    } else if (e.key === Escape) {\n      if (internalState.current.previousTextValue) {\n        setTextValue(undefined);\n        internalState.current.previousTextValue = undefined;\n      }\n    }\n\n    if (keyboardSpinState !== nextKeyboardSpinState) {\n      setKeyboardSpinState(nextKeyboardSpinState);\n    }\n  };\n\n  const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (keyboardSpinState !== 'rest') {\n      setKeyboardSpinState('rest');\n      internalState.current.spinState = 'rest';\n    }\n  };\n\n  const commit = (e: SpinButtonChangeEvent, newValue?: number | null, newDisplayValue?: string) => {\n    const valueChanged = newValue !== undefined && currentValue !== newValue;\n    const displayValueChanged =\n      newDisplayValue !== undefined &&\n      internalState.current.previousTextValue !== undefined &&\n      internalState.current.previousTextValue !== newDisplayValue;\n\n    let roundedValue;\n    if (valueChanged) {\n      roundedValue = precisionRound(newValue!, precision);\n      setCurrentValue(roundedValue);\n      internalState.current.value = roundedValue;\n    } else if (displayValueChanged && !isControlled) {\n      const nextValue = parseFloat(newDisplayValue as string);\n      if (!isNaN(nextValue)) {\n        setCurrentValue(precisionRound(nextValue, precision));\n        internalState.current.value = precisionRound(nextValue, precision);\n      }\n    }\n\n    if (valueChanged || displayValueChanged) {\n      onChange?.(e, { value: roundedValue, displayValue: newDisplayValue });\n    }\n\n    setTextValue(undefined);\n  };\n\n  let valueToDisplay;\n  if (textValue !== undefined) {\n    valueToDisplay = textValue;\n  } else if (value === null || currentValue === null) {\n    valueToDisplay = displayValue ?? '';\n    internalState.current.value = null;\n    internalState.current.atBound = 'none';\n  } else {\n    const roundedValue = precisionRound(currentValue, precision);\n    internalState.current.value = roundedValue;\n    internalState.current.atBound = getBound(roundedValue, min, max);\n    if (isControlled) {\n      valueToDisplay = displayValue ?? String(roundedValue);\n    } else {\n      valueToDisplay = String(roundedValue);\n    }\n  }\n\n  const state: SpinButtonState = {\n    size,\n    appearance,\n    spinState: keyboardSpinState,\n    atBound: internalState.current.atBound,\n\n    components: {\n      root: 'span',\n      input: 'input',\n      incrementButton: 'button',\n      decrementButton: 'button',\n    },\n    root: slot.always(root, {\n      defaultProps: nativeProps.root,\n      elementType: 'span',\n    }),\n    input: slot.always(input, {\n      defaultProps: {\n        autoComplete: 'off',\n        role: 'spinbutton',\n        appearance,\n        type: 'text',\n        ...nativeProps.primary,\n      },\n      elementType: 'input',\n    }),\n    incrementButton: slot.always(incrementButton, {\n      defaultProps: {\n        tabIndex: -1,\n        children: <ChevronUp16Regular />,\n        disabled:\n          nativeProps.primary.disabled ||\n          internalState.current.atBound === 'max' ||\n          internalState.current.atBound === 'both',\n        'aria-label': 'Increment value',\n        type: 'button',\n      },\n      elementType: 'button',\n    }),\n    decrementButton: slot.always(decrementButton, {\n      defaultProps: {\n        tabIndex: -1,\n        children: <ChevronDown16Regular />,\n        disabled:\n          nativeProps.primary.disabled ||\n          internalState.current.atBound === 'min' ||\n          internalState.current.atBound === 'both',\n        'aria-label': 'Decrement value',\n        type: 'button',\n      },\n      elementType: 'button',\n    }),\n  };\n\n  state.input.value = valueToDisplay;\n  state.input.ref = useMergedRefs(inputRef, ref);\n  state.input['aria-valuemin'] = min;\n  state.input['aria-valuemax'] = max;\n  state.input['aria-valuenow'] = internalState.current.value ?? undefined;\n  state.input['aria-valuetext'] = state.input['aria-valuetext'] ?? ((value !== undefined && displayValue) || undefined);\n  state.input.onChange = mergeCallbacks(state.input.onChange, handleInputChange);\n  state.input.onInput = mergeCallbacks(state.input.onInput, handleInputChange);\n  state.input.onBlur = mergeCallbacks(state.input.onBlur, handleBlur);\n  state.input.onKeyDown = mergeCallbacks(state.input.onKeyDown, handleKeyDown);\n  state.input.onKeyUp = mergeCallbacks(state.input.onKeyUp, handleKeyUp);\n\n  state.incrementButton.onMouseDown = mergeCallbacks(handleIncrementMouseDown, state.incrementButton.onMouseDown);\n  state.incrementButton.onMouseUp = mergeCallbacks(state.incrementButton.onMouseUp, handleStepMouseUpOrLeave);\n  state.incrementButton.onMouseLeave = mergeCallbacks(state.incrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n\n  state.decrementButton.onMouseDown = mergeCallbacks(handleDecrementMouseDown, state.decrementButton.onMouseDown);\n  state.decrementButton.onMouseUp = mergeCallbacks(state.decrementButton.onMouseUp, handleStepMouseUpOrLeave);\n  state.decrementButton.onMouseLeave = mergeCallbacks(state.decrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n\n  return state;\n};\n"],"names":["React","useFieldControlProps_unstable","getPartitionedNativeProps","mergeCallbacks","useControllableState","useTimeout","slot","useMergedRefs","ArrowUp","ArrowDown","End","Enter","Escape","Home","PageDown","PageUp","calculatePrecision","precisionRound","getBound","clamp","ChevronUp16Regular","ChevronDown16Regular","useOverrides_unstable","useOverrides","DEFAULT_SPIN_DELAY_MS","MIN_SPIN_DELAY_MS","MAX_SPIN_TIME_MS","lerp","start","end","percent","useSpinButton_unstable","props","ref","supportsLabelFor","supportsRequired","nativeProps","primarySlotTagName","excludedPropNames","overrides","value","displayValue","defaultValue","min","max","step","stepPage","precision","precisionFromProps","onChange","size","appearance","inputDefaultAppearance","root","input","incrementButton","decrementButton","useMemo","Math","currentValue","setCurrentValue","state","defaultState","initialState","inputRef","useRef","isControlled","undefined","textValue","setTextValue","useState","keyboardSpinState","setKeyboardSpinState","internalState","spinState","spinTime","spinDelay","atBound","setStepTimeout","clearStepTimeout","stepValue","e","direction","startFrom","startValue","current","num","parseFloat","isNaN","val","dir","stepSize","stepStart","nullStep","commit","newValue","Number","handleInputChange","previousTextValue","String","target","ariaValueNow","handleIncrementMouseDown","handleDecrementMouseDown","handleStepMouseUpOrLeave","handleBlur","handleKeyDown","nextKeyboardSpinState","key","preventDefault","shiftKey","handleKeyUp","newDisplayValue","valueChanged","displayValueChanged","roundedValue","nextValue","valueToDisplay","components","always","defaultProps","elementType","autoComplete","role","type","primary","tabIndex","children","disabled","onInput","onBlur","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onMouseLeave"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}