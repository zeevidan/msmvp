{"version":3,"sources":["../src/components/Select/useSelect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport { getPartitionedNativeProps, useEventCallback, slot } from '@fluentui/react-utilities';\nimport { ChevronDownRegular } from '@fluentui/react-icons';\nimport type { SelectProps, SelectState } from './Select.types';\nimport { useOverrides_unstable as useOverrides } from '@fluentui/react-shared-contexts';\n\n/**\n * Create the state required to render Select.\n *\n * The returned state can be modified with hooks such as useSelectStyles,\n * before being passed to renderSelect.\n *\n * @param props - props from this instance of Select\n * @param ref - reference to the `<select>` element in Select\n */\nexport const useSelect_unstable = (props: SelectProps, ref: React.Ref<HTMLSelectElement>): SelectState => {\n  // Merge props from surrounding <Field>, if any\n  props = useFieldControlProps_unstable(props, { supportsLabelFor: true, supportsRequired: true, supportsSize: true });\n\n  const overrides = useOverrides();\n\n  const {\n    defaultValue,\n    value,\n    select,\n    icon,\n    root,\n    appearance = overrides.inputDefaultAppearance ?? 'outline',\n\n    onChange,\n    size = 'medium',\n  } = props;\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'select',\n    excludedPropNames: ['appearance', 'defaultValue', 'onChange', 'size', 'value'],\n  });\n\n  const state: SelectState = {\n    size,\n    appearance,\n    components: {\n      root: 'span',\n      select: 'select',\n      icon: 'span',\n    },\n    select: slot.always(select, {\n      defaultProps: {\n        defaultValue,\n        value,\n        ref,\n        ...nativeProps.primary,\n      },\n      elementType: 'select',\n    }),\n    icon: slot.optional(icon, {\n      renderByDefault: true,\n      defaultProps: { children: <ChevronDownRegular /> },\n      elementType: 'span',\n    }),\n    root: slot.always(root, {\n      defaultProps: nativeProps.root,\n      elementType: 'span',\n    }),\n  };\n\n  state.select.onChange = useEventCallback(event => {\n    onChange?.(event, { value: (event.target as HTMLSelectElement).value });\n  });\n\n  return state;\n};\n"],"names":["useSelect_unstable","props","ref","useFieldControlProps_unstable","supportsLabelFor","supportsRequired","supportsSize","overrides","useOverrides","defaultValue","value","select","icon","root","appearance","inputDefaultAppearance","onChange","size","nativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","state","components","slot","always","defaultProps","primary","elementType","optional","renderByDefault","children","React","createElement","ChevronDownRegular","useEventCallback","event","target"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgBaA;;;eAAAA;;;;iEAhBU;4BACuB;gCACoB;4BAC/B;qCAEmB;AAW/C,MAAMA,qBAAqB,CAACC,OAAoBC;IACrD,+CAA+C;IAC/CD,QAAQE,IAAAA,yCAAAA,EAA8BF,OAAO;QAAEG,kBAAkB;QAAMC,kBAAkB;QAAMC,cAAc;IAAK;IAElH,MAAMC,YAAYC,IAAAA,0CAAAA;QAQHD;IANf,MAAM,EACJE,YAAY,EACZC,KAAK,EACLC,MAAM,EACNC,IAAI,EACJC,IAAI,EACJC,aAAaP,CAAAA,oCAAAA,UAAUQ,sBAAsB,AAAtBA,MAAsB,QAAhCR,sCAAAA,KAAAA,IAAAA,oCAAoC,SAAS,EAE1DS,QAAQ,EACRC,OAAO,QAAQ,EAChB,GAAGhB;IAEJ,MAAMiB,cAAcC,IAAAA,yCAAAA,EAA0B;QAC5ClB;QACAmB,oBAAoB;QACpBC,mBAAmB;YAAC;YAAc;YAAgB;YAAY;YAAQ;SAAQ;IAChF;IAEA,MAAMC,QAAqB;QACzBL;QACAH;QACAS,YAAY;YACVV,MAAM;YACNF,QAAQ;YACRC,MAAM;QACR;QACAD,QAAQa,oBAAAA,CAAKC,MAAM,CAACd,QAAQ;YAC1Be,cAAc;gBACZjB;gBACAC;gBACAR;gBACA,GAAGgB,YAAYS,OAAO;YACxB;YACAC,aAAa;QACf;QACAhB,MAAMY,oBAAAA,CAAKK,QAAQ,CAACjB,MAAM;YACxBkB,iBAAiB;YACjBJ,cAAc;gBAAEK,UAAAA,WAAAA,GAAUC,OAAAC,aAAA,CAACC,8BAAAA,EAAAA;YAAsB;YACjDN,aAAa;QACf;QACAf,MAAMW,oBAAAA,CAAKC,MAAM,CAACZ,MAAM;YACtBa,cAAcR,YAAYL,IAAI;YAC9Be,aAAa;QACf;IACF;IAEAN,MAAMX,MAAM,CAACK,QAAQ,GAAGmB,IAAAA,gCAAAA,EAAiBC,CAAAA;QACvCpB,aAAAA,QAAAA,aAAAA,KAAAA,IAAAA,KAAAA,IAAAA,SAAWoB,OAAO;YAAE1B,OAAO0B,MAAOC,MAAM,CAAuB3B,KAAK;QAAC;IACvE;IAEA,OAAOY;AACT"}