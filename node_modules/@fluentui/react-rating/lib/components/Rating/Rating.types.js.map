{"version":3,"sources":["../src/components/Rating/Rating.types.ts"],"sourcesContent":["import * as React from 'react';\nimport type { ComponentProps, ComponentState, EventData, EventHandler, Slot } from '@fluentui/react-utilities';\nimport { RatingItemContextValue } from '../RatingItem/RatingItem.types';\n\nexport type RatingSlots = {\n  root: NonNullable<Slot<'div'>>;\n};\n\n/**\n * Rating Props\n */\nexport type RatingProps = Omit<ComponentProps<Partial<RatingSlots>>, 'onChange'> & {\n  /**\n   * Controls the color of the Rating.\n   * @default neutral\n   */\n  color?: 'brand' | 'marigold' | 'neutral';\n  /**\n   * Default value of the Rating\n   */\n  defaultValue?: number;\n  /**\n   * The icon to display when the rating value is greater than or equal to the item's value.\n   */\n  iconFilled?: React.ElementType;\n  /**\n   * The icon to display when the rating value is less than the item's value.\n   */\n  iconOutline?: React.ElementType;\n  /**\n   * Prop to generate the aria-label for the rating inputs.\n   * @default (rating) =\\> `${rating}`\n   */\n  itemLabel?: (rating: number) => string;\n  /**\n   * The max value of the rating. This controls the number of rating items displayed.\n   * Must be a whole number greater than 1.\n   * @default 5\n   */\n  max?: number;\n  /**\n   * Name for the Radio inputs. If not provided, one will be automatically generated\n   */\n  name?: string;\n  /**\n   * Callback when the rating value is changed by the user.\n   */\n  onChange?: EventHandler<RatingOnChangeEventData>;\n  /**\n   * Sets the precision to allow half-filled shapes in Rating\n   * @default 1\n   */\n  step?: 0.5 | 1;\n  /**\n   * Sets the size of the Rating items.\n   * @default extra-large\n   */\n  size?: 'small' | 'medium' | 'large' | 'extra-large';\n  /**\n   * The value of the rating\n   */\n  value?: number;\n};\n\n/**\n * Data for the onChange event for Rating.\n */\nexport type RatingOnChangeEventData = EventData<'change', React.FormEvent<HTMLDivElement>> & {\n  /**\n   * The new value of the rating.\n   */\n  value: number;\n};\n\n/**\n * State used in rendering Rating\n */\nexport type RatingState = ComponentState<RatingSlots> &\n  Required<Pick<RatingProps, 'color' | 'iconFilled' | 'iconOutline' | 'name' | 'step' | 'size' | 'value'>> &\n  Pick<RatingProps, 'itemLabel'> & {\n    hoveredValue?: number | undefined;\n  };\n\nexport type RatingContextValues = {\n  ratingItem: RatingItemContextValue;\n};\n"],"names":["React"],"rangeMappings":"","mappings":"AAAA,YAAYA,WAAW,QAAQ"}