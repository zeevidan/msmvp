{"version":3,"sources":["../src/components/AlphaSlider/useAlphaSliderState.ts"],"sourcesContent":["import * as React from 'react';\nimport { tinycolor } from '@ctrl/tinycolor';\nimport { clamp, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { alphaSliderCSSVars } from './useAlphaSliderStyles.styles';\nimport type { AlphaSliderState, AlphaSliderProps } from './AlphaSlider.types';\nimport { useColorPickerContextValue_unstable } from '../../contexts/colorPicker';\nimport { MIN, MAX } from '../../utils/constants';\nimport { getPercent } from '../../utils/getPercent';\nimport { adjustToTransparency, calculateTransparencyValue, getSliderDirection } from './alphaSliderUtils';\nimport { createHsvColor } from '../../utils/createHsvColor';\n\nexport const useAlphaSliderState_unstable = (state: AlphaSliderState, props: AlphaSliderProps) => {\n  'use no memo';\n\n  const { dir } = useFluent();\n  const onChangeFromContext = useColorPickerContextValue_unstable(ctx => ctx.requestChange);\n  const colorFromContext = useColorPickerContextValue_unstable(ctx => ctx.color);\n  const { color, onChange = onChangeFromContext, transparency = false, vertical = false } = props;\n  const hsvColor = color || colorFromContext;\n  const hslColor = tinycolor(hsvColor).toHsl();\n\n  const [currentValue, setCurrentValue] = useControllableState({\n    defaultState: calculateTransparencyValue(transparency, props.defaultColor?.a),\n    state: calculateTransparencyValue(transparency, hsvColor?.a),\n    initialState: adjustToTransparency(100, transparency),\n  });\n\n  const clampedValue = clamp(currentValue, MIN, MAX);\n  const valuePercent = getPercent(clampedValue, MIN, MAX);\n\n  const inputOnChange = state.input.onChange;\n\n  const _onChange: React.ChangeEventHandler<HTMLInputElement> = useEventCallback(event => {\n    const newValue = adjustToTransparency(Number(event.target.value), transparency);\n    const newColor = createHsvColor({ ...hsvColor, a: newValue / 100 });\n    setCurrentValue(newValue);\n    inputOnChange?.(event);\n    onChange?.(event, { type: 'change', event, color: newColor });\n  });\n\n  const sliderDirection = getSliderDirection(dir, vertical, transparency);\n\n  const rootVariables = {\n    [alphaSliderCSSVars.sliderDirectionVar]: sliderDirection,\n    [alphaSliderCSSVars.sliderProgressVar]: `${valuePercent}%`,\n    [alphaSliderCSSVars.thumbColorVar]: `hsla(${hslColor.h} ${hslColor.s * 100}%, ${hslColor.l * 100}%, ${hslColor.a})`,\n    [alphaSliderCSSVars.railColorVar]: `hsl(${hslColor.h} ${hslColor.s * 100}%, ${hslColor.l * 100}%)`,\n  };\n\n  // Root props\n  state.root.style = {\n    ...rootVariables,\n    ...state.root.style,\n  };\n\n  // Input Props\n  state.input.value = clampedValue;\n  state.input.onChange = _onChange;\n\n  return state;\n};\n"],"names":["useAlphaSliderState_unstable","state","props","dir","useFluent","onChangeFromContext","useColorPickerContextValue_unstable","ctx","requestChange","colorFromContext","color","onChange","transparency","vertical","hsvColor","hslColor","tinycolor","toHsl","currentValue","setCurrentValue","useControllableState","defaultState","calculateTransparencyValue","defaultColor","a","initialState","adjustToTransparency","clampedValue","clamp","MIN","MAX","valuePercent","getPercent","inputOnChange","input","_onChange","useEventCallback","event","newValue","Number","target","value","newColor","createHsvColor","type","sliderDirection","getSliderDirection","rootVariables","alphaSliderCSSVars","sliderDirectionVar","sliderProgressVar","thumbColorVar","h","s","l","railColorVar","root","style"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}