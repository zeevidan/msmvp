{"version":3,"sources":["../src/components/AlphaSlider/useAlphaSlider.ts"],"sourcesContent":["import * as React from 'react';\nimport { getPartitionedNativeProps, useId, slot } from '@fluentui/react-utilities';\nimport type { AlphaSliderProps, AlphaSliderState } from './AlphaSlider.types';\nimport { useAlphaSliderState_unstable } from './useAlphaSliderState';\nimport { useColorPickerContextValue_unstable } from '../../contexts/colorPicker';\n\n/**\n * Create the state required to render AlphaSlider.\n *\n * The returned state can be modified with hooks such as useAlphaSliderStyles_unstable,\n * before being passed to renderAlphaSlider_unstable.\n *\n * @param props - props from this instance of AlphaSlider\n * @param ref - reference to root HTMLInputElement of AlphaSlider\n */\nexport const useAlphaSlider_unstable = (\n  props: AlphaSliderProps,\n  ref: React.Ref<HTMLInputElement>,\n): AlphaSliderState => {\n  const shapeFromContext = useColorPickerContextValue_unstable(ctx => ctx.shape);\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['onChange', 'color'],\n  });\n\n  const {\n    shape = shapeFromContext,\n    vertical,\n    // Slots\n    root,\n    input,\n    rail,\n    thumb,\n  } = props;\n\n  const state: AlphaSliderState = {\n    shape,\n    vertical,\n    components: {\n      input: 'input',\n      rail: 'div',\n      root: 'div',\n      thumb: 'div',\n    },\n    root: slot.always(root, {\n      defaultProps: nativeProps.root,\n      elementType: 'div',\n    }),\n    input: slot.always(input, {\n      defaultProps: {\n        id: useId('slider-', props.id),\n        ref,\n        ...nativeProps.primary,\n        type: 'range',\n      },\n      elementType: 'input',\n    }),\n    rail: slot.always(rail, { elementType: 'div' }),\n    thumb: slot.always(thumb, { elementType: 'div' }),\n  };\n\n  useAlphaSliderState_unstable(state, props);\n\n  return state;\n};\n"],"names":["useAlphaSlider_unstable","props","ref","shapeFromContext","useColorPickerContextValue_unstable","ctx","shape","nativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","vertical","root","input","rail","thumb","state","components","slot","always","defaultProps","elementType","id","useId","primary","type","useAlphaSliderState_unstable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAeaA;;;eAAAA;;;;iEAfU;gCACgC;qCAEV;6BACO;AAW7C,MAAMA,0BAA0B,CACrCC,OACAC;IAEA,MAAMC,mBAAmBC,IAAAA,gDAAAA,EAAoCC,CAAAA,MAAOA,IAAIC,KAAK;IAC7E,MAAMC,cAAcC,IAAAA,yCAAAA,EAA0B;QAC5CP;QACAQ,oBAAoB;QACpBC,mBAAmB;YAAC;YAAY;SAAQ;IAC1C;IAEA,MAAM,EACJJ,QAAQH,gBAAgB,EACxBQ,QAAQ,EAERC,IAAI,EACJC,KAAK,EACLC,IAAI,EACJC,KAAK,EACN,GAAGd;IAEJ,MAAMe,QAA0B;QAC9BV;QACAK;QACAM,YAAY;YACVJ,OAAO;YACPC,MAAM;YACNF,MAAM;YACNG,OAAO;QACT;QACAH,MAAMM,oBAAAA,CAAKC,MAAM,CAACP,MAAM;YACtBQ,cAAcb,YAAYK,IAAI;YAC9BS,aAAa;QACf;QACAR,OAAOK,oBAAAA,CAAKC,MAAM,CAACN,OAAO;YACxBO,cAAc;gBACZE,IAAIC,IAAAA,qBAAAA,EAAM,WAAWtB,MAAMqB,EAAE;gBAC7BpB;gBACA,GAAGK,YAAYiB,OAAO;gBACtBC,MAAM;YACR;YACAJ,aAAa;QACf;QACAP,MAAMI,oBAAAA,CAAKC,MAAM,CAACL,MAAM;YAAEO,aAAa;QAAM;QAC7CN,OAAOG,oBAAAA,CAAKC,MAAM,CAACJ,OAAO;YAAEM,aAAa;QAAM;IACjD;IAEAK,IAAAA,iDAAAA,EAA6BV,OAAOf;IAEpC,OAAOe;AACT"}