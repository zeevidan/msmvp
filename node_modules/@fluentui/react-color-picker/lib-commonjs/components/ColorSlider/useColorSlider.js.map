{"version":3,"sources":["../src/components/ColorSlider/useColorSlider.ts"],"sourcesContent":["import * as React from 'react';\nimport { tinycolor } from '@ctrl/tinycolor';\nimport {\n  getPartitionedNativeProps,\n  useId,\n  slot,\n  useControllableState,\n  useEventCallback,\n} from '@fluentui/react-utilities';\nimport { colorSliderCSSVars } from './useColorSliderStyles.styles';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport type { ColorSliderProps, ColorSliderState } from './ColorSlider.types';\nimport { useColorPickerContextValue_unstable } from '../../contexts/colorPicker';\nimport { MIN, HUE_MAX, MAX as COLOR_MAX } from '../../utils/constants';\nimport { getPercent } from '../../utils/getPercent';\nimport { createHsvColor } from '../../utils/createHsvColor';\nimport { clampValue, type ChannelActions, adjustChannel } from '../../utils/adjustChannel';\nimport { HsvColor } from '../../types/color';\nimport { INITIAL_COLOR_HSV } from '../../utils/constants';\n\n/**\n * Create the state required to render ColorSlider.\n *\n * The returned state can be modified with hooks such as useColorSliderStyles_unstable,\n * before being passed to renderColorSlider_unstable.\n *\n * @param props - props from this instance of ColorSlider\n * @param ref - reference to root HTMLInputElement of ColorSlider\n */\nexport const useColorSlider_unstable = (\n  props: ColorSliderProps,\n  ref: React.Ref<HTMLInputElement>,\n): ColorSliderState => {\n  'use no memo';\n\n  const { dir } = useFluent();\n  const onChangeFromContext = useColorPickerContextValue_unstable(ctx => ctx.requestChange);\n  const colorFromContext = useColorPickerContextValue_unstable(ctx => ctx.color);\n  const shapeFromContext = useColorPickerContextValue_unstable(ctx => ctx.shape);\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['onChange', 'color'],\n  });\n\n  const {\n    color,\n    channel = 'hue',\n    onChange = onChangeFromContext,\n    shape = shapeFromContext,\n    vertical,\n    // Slots\n    root,\n    input,\n    rail,\n    thumb,\n  } = props;\n\n  const hsvColor = color || colorFromContext;\n  const hslColor = tinycolor(hsvColor).toHsl();\n\n  const [currentColor, setCurrentColor] = useControllableState<HsvColor>({\n    defaultState: props.defaultColor,\n    state: hsvColor,\n    initialState: INITIAL_COLOR_HSV,\n  });\n\n  const MAX = channel === 'hue' ? HUE_MAX : COLOR_MAX;\n\n  const valueChannelActions: ChannelActions<number> = {\n    hue: clampValue(currentColor.h),\n    saturation: clampValue(currentColor.s * 100),\n    value: clampValue(currentColor.v * 100),\n  };\n\n  const clampedValue = adjustChannel(channel, valueChannelActions);\n  const valuePercent = getPercent(clampedValue, MIN, MAX);\n\n  const inputOnChange = input?.onChange;\n\n  const _onChange: React.ChangeEventHandler<HTMLInputElement> = useEventCallback(event => {\n    const newValue = Number(event.target.value);\n    const colorActions: ChannelActions<() => HsvColor> = {\n      hue: () => createHsvColor({ ...hsvColor, h: newValue }),\n      saturation: () => createHsvColor({ ...hsvColor, s: newValue / 100 }),\n      value: () => createHsvColor({ ...hsvColor, v: newValue / 100 }),\n    };\n    const newColor = adjustChannel(channel, colorActions)();\n\n    setCurrentColor(newColor);\n\n    inputOnChange?.(event);\n    onChange?.(event, {\n      type: 'change',\n      event,\n      color: newColor,\n    });\n  });\n\n  const rootVariables = {\n    [colorSliderCSSVars.sliderDirectionVar]: vertical ? '180deg' : dir === 'ltr' ? '-90deg' : '90deg',\n    [colorSliderCSSVars.sliderProgressVar]: `${valuePercent}%`,\n    [colorSliderCSSVars.thumbColorVar]:\n      channel === 'hue' ? `hsl(${clampedValue}, 100%, 50%)` : tinycolor(hsvColor).toRgbString(),\n    [colorSliderCSSVars.railColorVar]:\n      channel === 'hue'\n        ? `hsl(${hslColor.h} ${hslColor.s * 100}%, ${hslColor.l * 100}%)`\n        : `hsl(${hslColor.h} 100%, 50%)`,\n  };\n\n  const state: ColorSliderState = {\n    shape,\n    vertical,\n    channel,\n    components: {\n      input: 'input',\n      rail: 'div',\n      root: 'div',\n      thumb: 'div',\n    },\n    root: slot.always(root, {\n      defaultProps: {\n        role: 'group',\n        ...nativeProps.root,\n      },\n      elementType: 'div',\n    }),\n    input: slot.always(input, {\n      defaultProps: {\n        id: useId('slider-', props.id),\n        ref,\n        min: MIN,\n        max: MAX,\n        tabIndex: 0,\n        ['aria-orientation']: vertical ? 'vertical' : 'horizontal',\n        ...nativeProps.primary,\n        type: 'range',\n      },\n      elementType: 'input',\n    }),\n    rail: slot.always(rail, { elementType: 'div' }),\n    thumb: slot.always(thumb, { elementType: 'div' }),\n  };\n\n  // Root props\n  state.root.style = {\n    ...rootVariables,\n    ...state.root.style,\n  };\n\n  // Input Props\n  state.input.value = clampedValue;\n  state.input.onChange = _onChange;\n  return state;\n};\n"],"names":["useColorSlider_unstable","props","ref","dir","useFluent","onChangeFromContext","useColorPickerContextValue_unstable","ctx","requestChange","colorFromContext","color","shapeFromContext","shape","nativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","channel","onChange","vertical","root","input","rail","thumb","hsvColor","hslColor","tinycolor","toHsl","currentColor","setCurrentColor","useControllableState","defaultState","defaultColor","state","initialState","INITIAL_COLOR_HSV","MAX","HUE_MAX","COLOR_MAX","valueChannelActions","hue","clampValue","h","saturation","s","value","v","clampedValue","adjustChannel","valuePercent","getPercent","MIN","inputOnChange","_onChange","useEventCallback","event","newValue","Number","target","colorActions","createHsvColor","newColor","type","rootVariables","colorSliderCSSVars","sliderDirectionVar","sliderProgressVar","thumbColorVar","toRgbString","railColorVar","l","components","slot","always","defaultProps","role","elementType","id","useId","min","max","tabIndex","primary","style"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}