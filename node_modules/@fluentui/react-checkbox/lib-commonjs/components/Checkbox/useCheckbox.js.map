{"version":3,"sources":["../src/components/Checkbox/useCheckbox.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport {\n  getPartitionedNativeProps,\n  useControllableState,\n  useEventCallback,\n  useId,\n  useIsomorphicLayoutEffect,\n  useMergedRefs,\n  slot,\n} from '@fluentui/react-utilities';\nimport { CheckboxProps, CheckboxState } from './Checkbox.types';\nimport {\n  Checkmark12Filled,\n  Checkmark16Filled,\n  Square12Filled,\n  Square16Filled,\n  CircleFilled,\n} from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { useFocusWithin } from '@fluentui/react-tabster';\n\n/**\n * Create the state required to render Checkbox.\n *\n * The returned state can be modified with hooks such as useCheckboxStyles_unstable,\n * before being passed to renderCheckbox_unstable.\n *\n * @param props - props from this instance of Checkbox\n * @param ref - reference to `<input>` element of Checkbox\n */\nexport const useCheckbox_unstable = (props: CheckboxProps, ref: React.Ref<HTMLInputElement>): CheckboxState => {\n  'use no memo';\n\n  // Merge props from surrounding <Field>, if any\n  props = useFieldControlProps_unstable(props, { supportsLabelFor: true, supportsRequired: true });\n\n  const { disabled = false, required, shape = 'square', size = 'medium', labelPosition = 'after', onChange } = props;\n\n  const [checked, setChecked] = useControllableState({\n    defaultState: props.defaultChecked,\n    state: props.checked,\n    initialState: false,\n  });\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['checked', 'defaultChecked', 'size', 'onChange'],\n  });\n\n  const mixed = checked === 'mixed';\n  const id = useId('checkbox-', nativeProps.primary.id);\n\n  let checkmarkIcon;\n  if (mixed) {\n    if (shape === 'circular') {\n      checkmarkIcon = <CircleFilled />;\n    } else {\n      checkmarkIcon = size === 'large' ? <Square16Filled /> : <Square12Filled />;\n    }\n  } else if (checked) {\n    checkmarkIcon = size === 'large' ? <Checkmark16Filled /> : <Checkmark12Filled />;\n  }\n\n  const state: CheckboxState = {\n    shape,\n    checked,\n    disabled,\n    size,\n    labelPosition,\n    components: {\n      root: 'span',\n      input: 'input',\n      indicator: 'div',\n      label: Label,\n    },\n    root: slot.always(props.root, {\n      defaultProps: {\n        ref: useFocusWithin<HTMLSpanElement>(),\n        ...nativeProps.root,\n      },\n      elementType: 'span',\n    }),\n    input: slot.always(props.input, {\n      defaultProps: {\n        type: 'checkbox',\n        id,\n        ref,\n        checked: checked === true,\n        ...nativeProps.primary,\n      },\n      elementType: 'input',\n    }),\n    label: slot.optional(props.label, {\n      defaultProps: {\n        htmlFor: id,\n        disabled,\n        required,\n        size: 'medium', // Even if the checkbox itself is large\n      },\n      elementType: Label,\n    }),\n    indicator: slot.optional(props.indicator, {\n      renderByDefault: true,\n      defaultProps: {\n        'aria-hidden': true,\n        children: checkmarkIcon,\n      },\n      elementType: 'div',\n    }),\n  };\n\n  state.input.onChange = useEventCallback(ev => {\n    const val = ev.currentTarget.indeterminate ? 'mixed' : ev.currentTarget.checked;\n    onChange?.(ev, { checked: val });\n    setChecked(val);\n  });\n\n  // Create a ref object for the input element so we can use it to set the indeterminate prop.\n  // Use useMergedRefs, since the ref might be undefined or a function-ref (no .current)\n  const inputRef = useMergedRefs(state.input.ref);\n  state.input.ref = inputRef;\n\n  // Set the <input> element's checked and indeterminate properties based on our tri-state property.\n  // Since indeterminate can only be set via javascript, it has to be done in a layout effect.\n  useIsomorphicLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = mixed;\n    }\n  }, [inputRef, mixed]);\n\n  return state;\n};\n"],"names":["useCheckbox_unstable","props","ref","useFieldControlProps_unstable","supportsLabelFor","supportsRequired","disabled","required","shape","size","labelPosition","onChange","checked","setChecked","useControllableState","defaultState","defaultChecked","state","initialState","nativeProps","getPartitionedNativeProps","primarySlotTagName","excludedPropNames","mixed","id","useId","primary","checkmarkIcon","React","createElement","CircleFilled","Square16Filled","Square12Filled","Checkmark16Filled","Checkmark12Filled","components","root","input","indicator","label","Label","slot","always","defaultProps","useFocusWithin","elementType","type","optional","htmlFor","renderByDefault","children","useEventCallback","ev","val","currentTarget","indeterminate","inputRef","useMergedRefs","useIsomorphicLayoutEffect","current"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA+BaA;;;eAAAA;;;;iEA/BU;4BACuB;gCASvC;4BAQA;4BACe;8BACS;AAWxB,MAAMA,uBAAuB,CAACC,OAAsBC;IACzD;IAEA,+CAA+C;IAC/CD,QAAQE,IAAAA,yCAAAA,EAA8BF,OAAO;QAAEG,kBAAkB;QAAMC,kBAAkB;IAAK;IAE9F,MAAM,EAAEC,WAAW,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,EAAEC,OAAO,QAAQ,EAAEC,gBAAgB,OAAO,EAAEC,QAAQ,EAAE,GAAGV;IAE7G,MAAM,CAACW,SAASC,WAAW,GAAGC,IAAAA,oCAAAA,EAAqB;QACjDC,cAAcd,MAAMe,cAAc;QAClCC,OAAOhB,MAAMW,OAAO;QACpBM,cAAc;IAChB;IAEA,MAAMC,cAAcC,IAAAA,yCAAAA,EAA0B;QAC5CnB;QACAoB,oBAAoB;QACpBC,mBAAmB;YAAC;YAAW;YAAkB;YAAQ;SAAW;IACtE;IAEA,MAAMC,QAAQX,YAAY;IAC1B,MAAMY,KAAKC,IAAAA,qBAAAA,EAAM,aAAaN,YAAYO,OAAO,CAACF,EAAE;IAEpD,IAAIG;IACJ,IAAIJ,OAAO;QACT,IAAIf,UAAU,YAAY;YACxBmB,gBAAAA,WAAAA,GAAgBC,OAAAC,aAAA,CAACC,wBAAAA,EAAAA;QACnB,OAAO;YACLH,gBAAgBlB,SAAS,UAAA,WAAA,GAAUmB,OAAAC,aAAA,CAACE,0BAAAA,EAAAA,QAAAA,WAAAA,GAAoBH,OAAAC,aAAA,CAACG,0BAAAA,EAAAA;QAC3D;IACF,OAAO,IAAIpB,SAAS;QAClBe,gBAAgBlB,SAAS,UAAA,WAAA,GAAUmB,OAAAC,aAAA,CAACI,6BAAAA,EAAAA,QAAAA,WAAAA,GAAuBL,OAAAC,aAAA,CAACK,6BAAAA,EAAAA;IAC9D;IAEA,MAAMjB,QAAuB;QAC3BT;QACAI;QACAN;QACAG;QACAC;QACAyB,YAAY;YACVC,MAAM;YACNC,OAAO;YACPC,WAAW;YACXC,OAAOC,iBAAAA;QACT;QACAJ,MAAMK,oBAAAA,CAAKC,MAAM,CAACzC,MAAMmC,IAAI,EAAE;YAC5BO,cAAc;gBACZzC,KAAK0C,IAAAA,4BAAAA;gBACL,GAAGzB,YAAYiB,IAAI;YACrB;YACAS,aAAa;QACf;QACAR,OAAOI,oBAAAA,CAAKC,MAAM,CAACzC,MAAMoC,KAAK,EAAE;YAC9BM,cAAc;gBACZG,MAAM;gBACNtB;gBACAtB;gBACAU,SAASA,YAAY;gBACrB,GAAGO,YAAYO,OAAO;YACxB;YACAmB,aAAa;QACf;QACAN,OAAOE,oBAAAA,CAAKM,QAAQ,CAAC9C,MAAMsC,KAAK,EAAE;YAChCI,cAAc;gBACZK,SAASxB;gBACTlB;gBACAC;gBACAE,MAAM;YACR;YACAoC,aAAaL,iBAAAA;QACf;QACAF,WAAWG,oBAAAA,CAAKM,QAAQ,CAAC9C,MAAMqC,SAAS,EAAE;YACxCW,iBAAiB;YACjBN,cAAc;gBACZ,eAAe;gBACfO,UAAUvB;YACZ;YACAkB,aAAa;QACf;IACF;IAEA5B,MAAMoB,KAAK,CAAC1B,QAAQ,GAAGwC,IAAAA,gCAAAA,EAAiBC,CAAAA;QACtC,MAAMC,MAAMD,GAAGE,aAAa,CAACC,aAAa,GAAG,UAAUH,GAAGE,aAAa,CAAC1C,OAAO;QAC/ED,aAAAA,QAAAA,aAAAA,KAAAA,IAAAA,KAAAA,IAAAA,SAAWyC,IAAI;YAAExC,SAASyC;QAAI;QAC9BxC,WAAWwC;IACb;IAEA,4FAA4F;IAC5F,sFAAsF;IACtF,MAAMG,WAAWC,IAAAA,6BAAAA,EAAcxC,MAAMoB,KAAK,CAACnC,GAAG;IAC9Ce,MAAMoB,KAAK,CAACnC,GAAG,GAAGsD;IAElB,kGAAkG;IAClG,4FAA4F;IAC5FE,IAAAA,yCAAAA,EAA0B;QACxB,IAAIF,SAASG,OAAO,EAAE;YACpBH,SAASG,OAAO,CAACJ,aAAa,GAAGhC;QACnC;IACF,GAAG;QAACiC;QAAUjC;KAAM;IAEpB,OAAON;AACT"}