{"version":3,"sources":["useCheckboxStyles.styles.js"],"sourcesContent":["import { makeResetStyles, makeStyles, mergeClasses } from '@griffel/react';\nimport { createFocusOutlineStyle } from '@fluentui/react-tabster';\nimport { tokens } from '@fluentui/react-theme';\nexport const checkboxClassNames = {\n    root: 'fui-Checkbox',\n    label: 'fui-Checkbox__label',\n    input: 'fui-Checkbox__input',\n    indicator: 'fui-Checkbox__indicator'\n};\n// CSS variables used internally in Checkbox's styles\nconst vars = {\n    indicatorColor: '--fui-Checkbox__indicator--color',\n    indicatorBorderColor: '--fui-Checkbox__indicator--borderColor',\n    indicatorBackgroundColor: '--fui-Checkbox__indicator--backgroundColor'\n};\n// The indicator size is used by the indicator and label styles\nconst indicatorSizeMedium = '16px';\nconst indicatorSizeLarge = '20px';\nconst useRootBaseClassName = makeResetStyles({\n    position: 'relative',\n    display: 'inline-flex',\n    cursor: 'pointer',\n    verticalAlign: 'middle',\n    color: tokens.colorNeutralForeground3,\n    ...createFocusOutlineStyle({\n        style: {},\n        selector: 'focus-within'\n    })\n});\nconst useRootStyles = makeStyles({\n    unchecked: {\n        ':hover': {\n            color: tokens.colorNeutralForeground2,\n            [vars.indicatorBorderColor]: tokens.colorNeutralStrokeAccessibleHover\n        },\n        ':active': {\n            color: tokens.colorNeutralForeground1,\n            [vars.indicatorBorderColor]: tokens.colorNeutralStrokeAccessiblePressed\n        }\n    },\n    checked: {\n        color: tokens.colorNeutralForeground1,\n        [vars.indicatorBackgroundColor]: tokens.colorCompoundBrandBackground,\n        [vars.indicatorColor]: tokens.colorNeutralForegroundInverted,\n        [vars.indicatorBorderColor]: tokens.colorCompoundBrandBackground,\n        ':hover': {\n            [vars.indicatorBackgroundColor]: tokens.colorCompoundBrandBackgroundHover,\n            [vars.indicatorBorderColor]: tokens.colorCompoundBrandBackgroundHover\n        },\n        ':active': {\n            [vars.indicatorBackgroundColor]: tokens.colorCompoundBrandBackgroundPressed,\n            [vars.indicatorBorderColor]: tokens.colorCompoundBrandBackgroundPressed\n        }\n    },\n    mixed: {\n        color: tokens.colorNeutralForeground1,\n        [vars.indicatorBorderColor]: tokens.colorCompoundBrandStroke,\n        [vars.indicatorColor]: tokens.colorCompoundBrandForeground1,\n        ':hover': {\n            [vars.indicatorBorderColor]: tokens.colorCompoundBrandStrokeHover,\n            [vars.indicatorColor]: tokens.colorCompoundBrandForeground1Hover\n        },\n        ':active': {\n            [vars.indicatorBorderColor]: tokens.colorCompoundBrandStrokePressed,\n            [vars.indicatorColor]: tokens.colorCompoundBrandForeground1Pressed\n        }\n    },\n    disabled: {\n        cursor: 'default',\n        color: tokens.colorNeutralForegroundDisabled,\n        [vars.indicatorBorderColor]: tokens.colorNeutralStrokeDisabled,\n        [vars.indicatorColor]: tokens.colorNeutralForegroundDisabled,\n        '@media (forced-colors: active)': {\n            color: 'GrayText',\n            [vars.indicatorColor]: 'GrayText'\n        }\n    }\n});\nconst useInputBaseClassName = makeResetStyles({\n    boxSizing: 'border-box',\n    cursor: 'inherit',\n    height: '100%',\n    margin: 0,\n    opacity: 0,\n    position: 'absolute',\n    top: 0,\n    // Calculate the width of the hidden input by taking into account the size of the indicator + the padding around it.\n    // This is done so that clicking on that \"empty space\" still toggles the checkbox.\n    width: `calc(${indicatorSizeMedium} + 2 * ${tokens.spacingHorizontalS})`\n});\nconst useInputStyles = makeStyles({\n    before: {\n        right: 0\n    },\n    after: {\n        left: 0\n    },\n    large: {\n        width: `calc(${indicatorSizeLarge} + 2 * ${tokens.spacingHorizontalS})`\n    }\n});\nconst useIndicatorBaseClassName = makeResetStyles({\n    alignSelf: 'flex-start',\n    boxSizing: 'border-box',\n    flexShrink: 0,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    color: `var(${vars.indicatorColor})`,\n    backgroundColor: `var(${vars.indicatorBackgroundColor})`,\n    borderColor: `var(${vars.indicatorBorderColor}, ${tokens.colorNeutralStrokeAccessible})`,\n    borderStyle: 'solid',\n    borderWidth: tokens.strokeWidthThin,\n    borderRadius: tokens.borderRadiusSmall,\n    margin: tokens.spacingVerticalS + ' ' + tokens.spacingHorizontalS,\n    fill: 'currentColor',\n    pointerEvents: 'none',\n    fontSize: '12px',\n    height: indicatorSizeMedium,\n    width: indicatorSizeMedium\n});\nconst useIndicatorStyles = makeStyles({\n    large: {\n        fontSize: '16px',\n        height: indicatorSizeLarge,\n        width: indicatorSizeLarge\n    },\n    circular: {\n        borderRadius: tokens.borderRadiusCircular\n    }\n});\n// Can't use makeResetStyles here because Label is a component that may itself use makeResetStyles.\nconst useLabelStyles = makeStyles({\n    base: {\n        alignSelf: 'center',\n        color: 'inherit',\n        cursor: 'inherit',\n        padding: `${tokens.spacingVerticalS} ${tokens.spacingHorizontalS}`\n    },\n    before: {\n        paddingRight: tokens.spacingHorizontalXS\n    },\n    after: {\n        paddingLeft: tokens.spacingHorizontalXS\n    },\n    // Use a (negative) margin to account for the difference between the indicator's height and the label's line height.\n    // This prevents the label from expanding the height of the checkbox, but preserves line height if the label wraps.\n    medium: {\n        marginTop: `calc((${indicatorSizeMedium} - ${tokens.lineHeightBase300}) / 2)`,\n        marginBottom: `calc((${indicatorSizeMedium} - ${tokens.lineHeightBase300}) / 2)`\n    },\n    large: {\n        marginTop: `calc((${indicatorSizeLarge} - ${tokens.lineHeightBase300}) / 2)`,\n        marginBottom: `calc((${indicatorSizeLarge} - ${tokens.lineHeightBase300}) / 2)`\n    }\n});\n/**\n * Apply styling to the Checkbox slots based on the state\n */ export const useCheckboxStyles_unstable = (state)=>{\n    'use no memo';\n    const { checked, disabled, labelPosition, shape, size } = state;\n    const rootBaseClassName = useRootBaseClassName();\n    const rootStyles = useRootStyles();\n    state.root.className = mergeClasses(checkboxClassNames.root, rootBaseClassName, disabled ? rootStyles.disabled : checked === 'mixed' ? rootStyles.mixed : checked ? rootStyles.checked : rootStyles.unchecked, state.root.className);\n    const inputBaseClassName = useInputBaseClassName();\n    const inputStyles = useInputStyles();\n    state.input.className = mergeClasses(checkboxClassNames.input, inputBaseClassName, size === 'large' && inputStyles.large, inputStyles[labelPosition], state.input.className);\n    const indicatorBaseClassName = useIndicatorBaseClassName();\n    const indicatorStyles = useIndicatorStyles();\n    if (state.indicator) {\n        state.indicator.className = mergeClasses(checkboxClassNames.indicator, indicatorBaseClassName, size === 'large' && indicatorStyles.large, shape === 'circular' && indicatorStyles.circular, state.indicator.className);\n    }\n    const labelStyles = useLabelStyles();\n    if (state.label) {\n        state.label.className = mergeClasses(checkboxClassNames.label, labelStyles.base, labelStyles[size], labelStyles[labelPosition], state.label.className);\n    }\n    return state;\n};\n"],"names":["checkboxClassNames","useCheckboxStyles_unstable","root","label","input","indicator","vars","indicatorColor","indicatorBorderColor","indicatorBackgroundColor","indicatorSizeMedium","indicatorSizeLarge","useRootBaseClassName","__resetStyles","r","s","useRootStyles","__styles","unchecked","Bi91k9c","pv5h1i","lj723h","Hnthvo","checked","sj55zd","wkncrt","zxk7z7","Hmsnfy","e6czan","qbydtz","mixed","Bunfa6h","B15ykmv","disabled","Bceei9c","Bbusuzp","mrqfp9","h","a","d","m","useInputBaseClassName","useInputStyles","before","j35jbq","after","oyh7mz","large","a9b677","useIndicatorBaseClassName","useIndicatorStyles","Be2twd7","Bqenvij","circular","Beyfa6y","Bbmb7ep","Btl43ni","B7oj6ja","Dimara","p","useLabelStyles","base","qb2dma","Byoj8tv","uwmqm3","z189sj","z8tnut","B0ocmuz","medium","B6of3ja","jrapky","state","labelPosition","shape","size","rootBaseClassName","rootStyles","className","mergeClasses","inputBaseClassName","inputStyles","indicatorBaseClassName","indicatorStyles","labelStyles"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}