{"version":3,"sources":["../src/components/List/useList.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  getIntrinsicElementProps,\n  OnSelectionChangeData,\n  slot,\n  useControllableState,\n  useEventCallback,\n} from '@fluentui/react-utilities';\nimport { useArrowNavigationGroup, useFocusFinders } from '@fluentui/react-tabster';\nimport { ListProps, ListState } from './List.types';\nimport { useListSelection } from '../../hooks/useListSelection';\nimport {\n  calculateListItemRoleForListRole,\n  calculateListRole,\n  validateGridCellsArePresent,\n  validateProperElementTypes,\n  validateProperRolesAreUsed,\n} from '../../utils';\n\nconst DEFAULT_ROOT_EL_TYPE = 'ul';\n\n/**\n * Create the state required to render List.\n *\n * The returned state can be modified with hooks such as useListStyles_unstable,\n * before being passed to renderList_unstable.\n *\n * @param props - props from this instance of List\n * @param ref - reference to root HTMLElement of List\n */\nexport const useList_unstable = (\n  props: ListProps,\n  ref: React.Ref<HTMLDivElement | HTMLUListElement | HTMLOListElement>,\n): ListState => {\n  const { navigationMode, selectionMode, selectedItems, defaultSelectedItems, onSelectionChange } = props;\n\n  const as = props.as || navigationMode === 'composite' ? 'div' : DEFAULT_ROOT_EL_TYPE;\n\n  const arrowNavigationAttributes = useArrowNavigationGroup({\n    axis: 'vertical',\n    memorizeCurrent: true,\n  });\n\n  const [selectionState, setSelectionState] = useControllableState({\n    state: selectedItems,\n    defaultState: defaultSelectedItems,\n    initialState: [],\n  });\n\n  const onChange = useEventCallback((e: React.SyntheticEvent, data: OnSelectionChangeData) => {\n    const selectedItemsAsArray = Array.from(data.selectedItems);\n    setSelectionState(selectedItemsAsArray);\n    onSelectionChange?.(e, { event: e, type: 'change', selectedItems: selectedItemsAsArray });\n  });\n\n  const selection = useListSelection({\n    onSelectionChange: onChange,\n    selectionMode: selectionMode || 'multiselect',\n    selectedItems: selectionState,\n  });\n\n  const listRole = props.role || calculateListRole(navigationMode, !!selectionMode);\n  const listItemRole = calculateListItemRoleForListRole(listRole);\n\n  const { findAllFocusable } = useFocusFinders();\n\n  const validateListItem = useEventCallback((listItemEl: HTMLElement) => {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    const itemRole = listItemEl.getAttribute('role') || '';\n    const focusable = findAllFocusable(listItemEl);\n    validateProperElementTypes(as, listItemEl.tagName.toLocaleLowerCase());\n    validateProperRolesAreUsed(listRole, itemRole, !!selectionMode, focusable.length > 0);\n    validateGridCellsArePresent(listRole, listItemEl);\n  });\n\n  return {\n    components: {\n      root: as,\n    },\n    root: slot.always(\n      getIntrinsicElementProps(as, {\n        ref,\n        role: listRole,\n        ...(selectionMode && {\n          'aria-multiselectable': selectionMode === 'multiselect' ? true : undefined,\n        }),\n        ...arrowNavigationAttributes,\n        ...props,\n      }),\n      { elementType: as },\n    ),\n    listItemRole,\n    validateListItem,\n    navigationMode,\n    // only pass down selection state if its handled internally, otherwise just report the events\n    selection: selectionMode ? selection : undefined,\n  };\n};\n"],"names":["useList_unstable","DEFAULT_ROOT_EL_TYPE","props","ref","navigationMode","selectionMode","selectedItems","defaultSelectedItems","onSelectionChange","as","arrowNavigationAttributes","useArrowNavigationGroup","axis","memorizeCurrent","selectionState","setSelectionState","useControllableState","state","defaultState","initialState","onChange","useEventCallback","e","data","selectedItemsAsArray","Array","from","event","type","selection","useListSelection","listRole","role","calculateListRole","listItemRole","calculateListItemRoleForListRole","findAllFocusable","useFocusFinders","validateListItem","listItemEl","process","env","NODE_ENV","itemRole","getAttribute","focusable","validateProperElementTypes","tagName","toLocaleLowerCase","validateProperRolesAreUsed","length","validateGridCellsArePresent","components","root","slot","always","getIntrinsicElementProps","undefined","elementType"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA8BaA;;;eAAAA;;;;iEA9BU;gCAOhB;8BACkD;kCAExB;uBAO1B;AAEP,MAAMC,uBAAuB;AAWtB,MAAMD,mBAAmB,CAC9BE,OACAC;IAEA,MAAM,EAAEC,cAAc,EAAEC,aAAa,EAAEC,aAAa,EAAEC,oBAAoB,EAAEC,iBAAiB,EAAE,GAAGN;IAElG,MAAMO,KAAKP,MAAMO,EAAE,IAAIL,mBAAmB,cAAc,QAAQH;IAEhE,MAAMS,4BAA4BC,IAAAA,qCAAAA,EAAwB;QACxDC,MAAM;QACNC,iBAAiB;IACnB;IAEA,MAAM,CAACC,gBAAgBC,kBAAkB,GAAGC,IAAAA,oCAAAA,EAAqB;QAC/DC,OAAOX;QACPY,cAAcX;QACdY,cAAc,EAAE;IAClB;IAEA,MAAMC,WAAWC,IAAAA,gCAAAA,EAAiB,CAACC,GAAyBC;QAC1D,MAAMC,uBAAuBC,MAAMC,IAAI,CAACH,KAAKjB,aAAa;QAC1DS,kBAAkBS;QAClBhB,sBAAAA,QAAAA,sBAAAA,KAAAA,IAAAA,KAAAA,IAAAA,kBAAoBc,GAAG;YAAEK,OAAOL;YAAGM,MAAM;YAAUtB,eAAekB;QAAqB;IACzF;IAEA,MAAMK,YAAYC,IAAAA,kCAAAA,EAAiB;QACjCtB,mBAAmBY;QACnBf,eAAeA,iBAAiB;QAChCC,eAAeQ;IACjB;IAEA,MAAMiB,WAAW7B,MAAM8B,IAAI,IAAIC,IAAAA,wBAAAA,EAAkB7B,gBAAgB,CAAC,CAACC;IACnE,MAAM6B,eAAeC,IAAAA,uCAAAA,EAAiCJ;IAEtD,MAAM,EAAEK,gBAAgB,EAAE,GAAGC,IAAAA,6BAAAA;IAE7B,MAAMC,mBAAmBjB,IAAAA,gCAAAA,EAAiB,CAACkB;QACzC,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;YACzC;QACF;QACA,MAAMC,WAAWJ,WAAWK,YAAY,CAAC,WAAW;QACpD,MAAMC,YAAYT,iBAAiBG;QACnCO,IAAAA,iCAAAA,EAA2BrC,IAAI8B,WAAWQ,OAAO,CAACC,iBAAiB;QACnEC,IAAAA,iCAAAA,EAA2BlB,UAAUY,UAAU,CAAC,CAACtC,eAAewC,UAAUK,MAAM,GAAG;QACnFC,IAAAA,kCAAAA,EAA4BpB,UAAUQ;IACxC;IAEA,OAAO;QACLa,YAAY;YACVC,MAAM5C;QACR;QACA4C,MAAMC,oBAAAA,CAAKC,MAAM,CACfC,IAAAA,wCAAAA,EAAyB/C,IAAI;YAC3BN;YACA6B,MAAMD;YACN,GAAI1B,iBAAiB;gBACnB,wBAAwBA,kBAAkB,gBAAgB,OAAOoD;YACnE,CAAC;YACD,GAAG/C,yBAAyB;YAC5B,GAAGR,KAAK;QACV,IACA;YAAEwD,aAAajD;QAAG;QAEpByB;QACAI;QACAlC;QACA,6FAA6F;QAC7FyB,WAAWxB,gBAAgBwB,YAAY4B;IACzC;AACF"}