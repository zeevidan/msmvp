{"version":3,"sources":["../src/hooks/useFlatTreeNavigation.ts"],"sourcesContent":["import { useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { TreeNavigationData_unstable } from '../Tree';\nimport { nextTypeAheadElement } from '../utils/nextTypeAheadElement';\nimport { treeDataTypes } from '../utils/tokens';\nimport { useRovingTabIndex } from './useRovingTabIndexes';\nimport { HTMLElementWalker } from '../utils/createHTMLElementWalker';\nimport { TreeItemValue } from '../TreeItem';\nimport { dataTreeItemValueAttrName } from '../utils/getTreeItemValueFromElement';\nimport * as React from 'react';\nimport { useHTMLElementWalkerRef } from './useHTMLElementWalkerRef';\nimport { TreeNavigationMode } from '../components/Tree/Tree.types';\nimport { useFocusFinders } from '@fluentui/react-tabster';\nimport { treeItemLayoutClassNames } from '../TreeItemLayout';\n\nexport function useFlatTreeNavigation(navigationMode: TreeNavigationMode = 'tree') {\n  'use no memo';\n\n  const { walkerRef, rootRef: walkerRootRef } = useHTMLElementWalkerRef();\n  const { rove, forceUpdate: forceUpdateRovingTabIndex, initialize: initializeRovingTabIndex } = useRovingTabIndex();\n  const { findFirstFocusable } = useFocusFinders();\n\n  const rootRefCallback: React.RefCallback<HTMLElement> = React.useCallback(\n    root => {\n      if (walkerRef.current && root) {\n        initializeRovingTabIndex(walkerRef.current);\n      }\n    },\n    [initializeRovingTabIndex, walkerRef],\n  );\n\n  function getNextElement(data: TreeNavigationData_unstable) {\n    if (!walkerRef.current) {\n      return null;\n    }\n    switch (data.type) {\n      case treeDataTypes.Click:\n        return data.target;\n      case treeDataTypes.TypeAhead:\n        walkerRef.current.currentElement = data.target;\n        return nextTypeAheadElement(walkerRef.current, data.event.key);\n      case treeDataTypes.ArrowLeft: {\n        const actions = queryActions(data.target);\n        if (navigationMode === 'treegrid' && actions?.contains(data.target.ownerDocument.activeElement)) {\n          return data.target;\n        }\n        const nextElement = parentElement(data.parentValue, walkerRef.current);\n        if (!nextElement && process.env.NODE_ENV !== 'production') {\n          // eslint-disable-next-line no-console\n          console.warn(\n            /* #__DE-INDENT__ */ `\n            @fluentui/react-tree [useFlatTreeNavigation]:\n            \\'ArrowLeft\\' navigation was not possible.\n            No parent element found for the current element:\n          `,\n            data.target,\n          );\n        }\n        return nextElement;\n      }\n      case treeDataTypes.ArrowRight: {\n        if (navigationMode === 'treegrid') {\n          const actions = queryActions(data.target);\n          if (actions) {\n            findFirstFocusable(actions)?.focus();\n          }\n          return null;\n        }\n        walkerRef.current.currentElement = data.target;\n        const nextElement = firstChild(data.target, walkerRef.current);\n        if (!nextElement && process.env.NODE_ENV !== 'production') {\n          const ariaLevel = Number(data.target.getAttribute('aria-level'));\n          // eslint-disable-next-line no-console\n          console.warn(\n            /* #__DE-INDENT__ */ `\n            @fluentui/react-tree [useFlatTreeNavigation]:\n            \\'ArrowRight\\' navigation was not possible.\n            No element with \"aria-posinset=1\" and \"aria-level=${ariaLevel + 1}\"\n            was found after the current element!\n          `,\n            data.target,\n          );\n        }\n        return nextElement;\n      }\n      case treeDataTypes.End:\n        walkerRef.current.currentElement = walkerRef.current.root;\n        return walkerRef.current.lastChild();\n      case treeDataTypes.Home:\n        walkerRef.current.currentElement = walkerRef.current.root;\n        return walkerRef.current.firstChild();\n      case treeDataTypes.ArrowDown:\n        walkerRef.current.currentElement = data.target;\n        return walkerRef.current.nextElement();\n      case treeDataTypes.ArrowUp:\n        walkerRef.current.currentElement = data.target;\n        return walkerRef.current.previousElement();\n    }\n  }\n  const navigate = useEventCallback((data: TreeNavigationData_unstable) => {\n    const nextElement = getNextElement(data);\n    if (nextElement) {\n      rove(nextElement);\n    }\n  });\n  return {\n    navigate,\n    rootRef: useMergedRefs<HTMLDivElement>(walkerRootRef, rootRefCallback),\n    forceUpdateRovingTabIndex,\n  } as const;\n}\n\nfunction firstChild(target: HTMLElement, treeWalker: HTMLElementWalker): HTMLElement | null {\n  const nextElement = treeWalker.nextElement();\n  if (!nextElement) {\n    return null;\n  }\n  const nextElementAriaPosInSet = nextElement.getAttribute('aria-posinset');\n  const nextElementAriaLevel = nextElement.getAttribute('aria-level');\n  const targetAriaLevel = target.getAttribute('aria-level');\n  if (nextElementAriaPosInSet === '1' && Number(nextElementAriaLevel) === Number(targetAriaLevel) + 1) {\n    return nextElement;\n  }\n  return null;\n}\n\nfunction parentElement(parentValue: TreeItemValue | undefined, treeWalker: HTMLElementWalker) {\n  if (parentValue === undefined) {\n    return null;\n  }\n  return treeWalker.root.querySelector<HTMLElement>(`[${dataTreeItemValueAttrName}=\"${parentValue}\"]`);\n}\n\nconst queryActions = (target: HTMLElement) =>\n  target.querySelector<HTMLElement>(\n    `:scope > .${treeItemLayoutClassNames.root} > .${treeItemLayoutClassNames.actions}`,\n  );\n"],"names":["useFlatTreeNavigation","navigationMode","walkerRef","rootRef","walkerRootRef","useHTMLElementWalkerRef","rove","forceUpdate","forceUpdateRovingTabIndex","initialize","initializeRovingTabIndex","useRovingTabIndex","findFirstFocusable","useFocusFinders","rootRefCallback","React","useCallback","root","current","getNextElement","data","type","treeDataTypes","Click","target","TypeAhead","currentElement","nextTypeAheadElement","event","key","ArrowLeft","actions","queryActions","contains","ownerDocument","activeElement","nextElement","parentElement","parentValue","process","env","NODE_ENV","console","warn","ArrowRight","focus","firstChild","ariaLevel","Number","getAttribute","End","lastChild","Home","ArrowDown","ArrowUp","previousElement","navigate","useEventCallback","useMergedRefs","treeWalker","nextElementAriaPosInSet","nextElementAriaLevel","targetAriaLevel","undefined","querySelector","dataTreeItemValueAttrName","treeItemLayoutClassNames"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}