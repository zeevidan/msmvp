{"version":3,"sources":["../src/utils/ImmutableMap.ts"],"sourcesContent":["const internalMapSymbol = Symbol('#internalMap');\n\nexport class ImmutableMap<Key, Value> implements Iterable<[Key, Value]> {\n  public static empty: ImmutableMap<never, never> = new ImmutableMap(new Map<never, never>());\n  public readonly size: number;\n\n  private [internalMapSymbol]: Map<Key, Value>;\n\n  public static dangerouslyGetInternalMap<Key, Value>(immutableMap: ImmutableMap<Key, Value>): Map<Key, Value> {\n    return immutableMap[internalMapSymbol];\n  }\n\n  public static copy<Key, Value>(immutableMap: ImmutableMap<Key, Value>): ImmutableMap<Key, Value> {\n    return this.from(immutableMap[internalMapSymbol]);\n  }\n\n  /**\n   * Creates a new {@link ImmutableMap} from an iterable.\n   * If the iterable is undefined, {@link ImmutableMap.empty} will be returned.\n   * If the iterable is already an {@link ImmutableMap}, it will be returned as is no copy will be made.\n   */\n  public static from<T extends [unknown, unknown]>(iterable?: Iterable<T>): ImmutableMap<T[0], T[1]>;\n  /**\n   * Creates a new {@link ImmutableMap} from an iterable with an auxiliary map function to modify the iterable.\n   * If the iterable is undefined, {@link ImmutableMap.empty} will be returned.\n   * If the iterable is already an {@link ImmutableMap}, it will be returned as is no copy will be made.\n   * The map function will be called for each element in the iterable.\n   */\n  public static from<T, U extends [unknown, unknown]>(\n    iterable: Iterable<T> | undefined,\n    mapFn: (value: T) => U,\n  ): ImmutableMap<U[0], U[1]>;\n  public static from(\n    iterable?: Iterable<unknown>,\n    mapFn?: (value: unknown) => [unknown, unknown],\n  ): ImmutableMap<unknown, unknown> {\n    if (iterable === undefined) {\n      return this.empty;\n    }\n    if (!mapFn) {\n      if (iterable instanceof this) {\n        return iterable;\n      }\n      // casting here is ok, as the function overload ensures that the iterable is\n      // Iterable<[unknown, unknown]>\n      // if mapFn is not provided\n      const iterableAsTuple = iterable as Iterable<[unknown, unknown]>;\n      return new this(new Map(iterableAsTuple));\n    }\n    const map = new Map<unknown, unknown>();\n    for (const value of iterable) {\n      map.set(...mapFn(value));\n    }\n    return new this(map);\n  }\n\n  public static [Symbol.hasInstance](instance: unknown): boolean {\n    return Boolean(typeof instance === 'object' && instance && internalMapSymbol in instance);\n  }\n\n  /**\n   * Do not use this constructor directly, use {@link ImmutableMap.from} instead.\n   * {@link ImmutableMap.from} handles instance verification (which might be problematic on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof#instanceof_and_multiple_realms | multiple realms}),\n   * avoid unnecessary copies, supports iterables and ensures that the internal map is never exposed.\n   *\n   *⚠️⚠️  _By using this constructor directly, you might end up with a mutable map, as it is not guaranteed that the internal map is not exposed._ ⚠️⚠️\n   */\n  constructor(internalMap: Map<Key, Value>) {\n    this[internalMapSymbol] = internalMap;\n    this.size = this[internalMapSymbol].size;\n  }\n\n  public delete(key: Key): ImmutableMap<Key, Value> {\n    if (!this.has(key)) {\n      return this;\n    }\n    const copy = ImmutableMap.copy(this);\n    copy[internalMapSymbol].delete(key);\n    return copy;\n  }\n  public get(key: Key): Value | undefined {\n    return this[internalMapSymbol].get(key);\n  }\n  public has(key: Key): boolean {\n    return this[internalMapSymbol].has(key);\n  }\n  public set(key: Key, value: Value): ImmutableMap<Key, Value> {\n    if (this.get(key) === value) {\n      return this;\n    }\n    const copy = ImmutableMap.copy(this);\n    copy[internalMapSymbol].set(key, value);\n    return copy;\n  }\n  public [Symbol.iterator](): Iterator<[Key, Value]> {\n    return this[internalMapSymbol].entries();\n  }\n}\n"],"names":["ImmutableMap","internalMapSymbol","Symbol","hasInstance","iterator","dangerouslyGetInternalMap","immutableMap","copy","from","iterable","mapFn","undefined","empty","iterableAsTuple","Map","map","value","set","instance","Boolean","delete","key","has","get","entries","constructor","internalMap","_define_property","size"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAEaA;;;eAAAA;;;;AAFb,MAAMC,oBAAoBC,OAAO;IAMtBD,qBAAAA,mBAkDMC,sBAAAA,OAAOC,WAAW,EAsCzBD,mBAAAA,OAAOE,QAAQ;AA5FlB,MAAMJ;IAMX,OAAcK,0BAAsCC,YAAsC,EAAmB;QAC3G,OAAOA,YAAY,CAACL,kBAAkB;IACxC;IAEA,OAAcM,KAAiBD,YAAsC,EAA4B;QAC/F,OAAO,IAAI,CAACE,IAAI,CAACF,YAAY,CAACL,kBAAkB;IAClD;IAkBA,OAAcO,KACZC,QAA4B,EAC5BC,KAA8C,EACd;QAChC,IAAID,aAAaE,WAAW;YAC1B,OAAO,IAAI,CAACC,KAAK;QACnB;QACA,IAAI,CAACF,OAAO;YACV,IAAID,oBAAoB,IAAI,EAAE;gBAC5B,OAAOA;YACT;YACA,4EAA4E;YAC5E,+BAA+B;YAC/B,2BAA2B;YAC3B,MAAMI,kBAAkBJ;YACxB,OAAO,IAAI,IAAI,CAAC,IAAIK,IAAID;QAC1B;QACA,MAAME,MAAM,IAAID;QAChB,KAAK,MAAME,SAASP,SAAU;YAC5BM,IAAIE,GAAG,IAAIP,MAAMM;QACnB;QACA,OAAO,IAAI,IAAI,CAACD;IAClB;IAEA,OAAc,CAACb,oBAAmB,CAACgB,QAAiB,EAAW;QAC7D,OAAOC,QAAQ,OAAOD,aAAa,YAAYA,YAAYjB,qBAAqBiB;IAClF;IAcOE,OAAOC,GAAQ,EAA4B;QAChD,IAAI,CAAC,IAAI,CAACC,GAAG,CAACD,MAAM;YAClB,OAAO,IAAI;QACb;QACA,MAAMd,OAAOP,aAAaO,IAAI,CAAC,IAAI;QACnCA,IAAI,CAACN,kBAAkB,CAACmB,MAAM,CAACC;QAC/B,OAAOd;IACT;IACOgB,IAAIF,GAAQ,EAAqB;QACtC,OAAO,IAAI,CAACpB,kBAAkB,CAACsB,GAAG,CAACF;IACrC;IACOC,IAAID,GAAQ,EAAW;QAC5B,OAAO,IAAI,CAACpB,kBAAkB,CAACqB,GAAG,CAACD;IACrC;IACOJ,IAAII,GAAQ,EAAEL,KAAY,EAA4B;QAC3D,IAAI,IAAI,CAACO,GAAG,CAACF,SAASL,OAAO;YAC3B,OAAO,IAAI;QACb;QACA,MAAMT,OAAOP,aAAaO,IAAI,CAAC,IAAI;QACnCA,IAAI,CAACN,kBAAkB,CAACgB,GAAG,CAACI,KAAKL;QACjC,OAAOT;IACT;IACO,CAACL,iBAAgB,GAA2B;QACjD,OAAO,IAAI,CAACD,kBAAkB,CAACuB,OAAO;IACxC;IApCA;;;;;;GAMC,GACDC,YAAYC,WAA4B,CAAE;QA/D1CC,IAAAA,kBAAA,EAAA,IAAA,EAAgBC,QAAhB,KAAA;QAEAD,IAAAA,kBAAA,EAAA,IAAA,EAAS1B,oBAAT,KAAA;QA8DE,IAAI,CAACA,kBAAkB,GAAGyB;QAC1B,IAAI,CAACE,IAAI,GAAG,IAAI,CAAC3B,kBAAkB,CAAC2B,IAAI;IAC1C;AA2BF;AA9FED,IAAAA,kBAAA,EADW3B,cACGY,SAAoC,IAAIZ,aAAa,IAAIc"}