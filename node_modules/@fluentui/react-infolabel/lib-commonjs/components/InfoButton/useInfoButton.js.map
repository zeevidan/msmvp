{"version":3,"sources":["../src/components/InfoButton/useInfoButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DefaultInfoButtonIcon12, DefaultInfoButtonIcon16, DefaultInfoButtonIcon20 } from './DefaultInfoButtonIcons';\nimport {\n  getIntrinsicElementProps,\n  mergeCallbacks,\n  useControllableState,\n  slot,\n  useMergedRefs,\n  elementContains,\n  useEventCallback,\n} from '@fluentui/react-utilities';\nimport { Popover, PopoverSurface } from '@fluentui/react-popover';\nimport type { InfoButtonProps, InfoButtonState } from './InfoButton.types';\nimport type { PopoverProps } from '@fluentui/react-popover';\n\nconst infoButtonIconMap = {\n  small: <DefaultInfoButtonIcon12 />,\n  medium: <DefaultInfoButtonIcon16 />,\n  large: <DefaultInfoButtonIcon20 />,\n} as const;\n\nconst popoverSizeMap = {\n  small: 'small',\n  medium: 'small',\n  large: 'medium',\n} as const;\n\n/**\n * Create the state required to render InfoButton.\n *\n * The returned state can be modified with hooks such as useInfoButtonStyles_unstable,\n * before being passed to renderInfoButton_unstable.\n *\n * @param props - props from this instance of InfoButton\n * @param ref - reference to root HTMLButtonElement of InfoButton\n */\nexport const useInfoButton_unstable = (props: InfoButtonProps, ref: React.Ref<HTMLButtonElement>): InfoButtonState => {\n  const { size = 'medium', inline = true } = props;\n\n  const rootRef = useMergedRefs(ref);\n\n  const state: InfoButtonState = {\n    inline,\n    size,\n\n    components: {\n      root: 'button',\n      popover: Popover as React.FC<Partial<PopoverProps>>,\n      info: PopoverSurface,\n    },\n\n    root: slot.always(\n      getIntrinsicElementProps('button', {\n        children: infoButtonIconMap[size],\n        type: 'button',\n        'aria-label': 'information',\n        ...props,\n        ref: rootRef,\n      }),\n      { elementType: 'button' },\n    ),\n    popover: slot.always(props.popover, {\n      defaultProps: {\n        inline,\n        positioning: 'above-start',\n        size: popoverSizeMap[size],\n        withArrow: true,\n      },\n      elementType: Popover as React.FC<Partial<Omit<PopoverProps, 'openOnHover'>>>,\n    }),\n    info: slot.always(props.info, {\n      defaultProps: {\n        role: 'note',\n        tabIndex: -1,\n      },\n      elementType: PopoverSurface,\n    }),\n  };\n\n  const [popoverOpen, setPopoverOpen] = useControllableState({\n    state: state.popover.open,\n    defaultState: state.popover.defaultOpen,\n    initialState: false,\n  });\n\n  state.popover.open = popoverOpen;\n  state.popover.onOpenChange = mergeCallbacks(state.popover.onOpenChange, (e, data) => setPopoverOpen(data.open));\n\n  const infoRef = useMergedRefs(state.info.ref);\n  state.info.ref = infoRef;\n\n  // Hide the popover when focus moves out of the button and popover\n  const onBlurButtonOrInfo = (e: React.FocusEvent) => {\n    const nextFocused = e.relatedTarget;\n\n    if (nextFocused && rootRef.current !== nextFocused && !elementContains(infoRef.current, nextFocused)) {\n      setPopoverOpen(false);\n    }\n  };\n\n  state.root.onBlur = useEventCallback(mergeCallbacks(state.root.onBlur, onBlurButtonOrInfo));\n  state.info.onBlurCapture = useEventCallback(mergeCallbacks(state.info.onBlurCapture, onBlurButtonOrInfo));\n  return state;\n};\n"],"names":["useInfoButton_unstable","infoButtonIconMap","small","React","createElement","DefaultInfoButtonIcon12","medium","DefaultInfoButtonIcon16","large","DefaultInfoButtonIcon20","popoverSizeMap","props","ref","size","inline","rootRef","useMergedRefs","state","components","root","popover","Popover","info","PopoverSurface","slot","always","getIntrinsicElementProps","children","type","elementType","defaultProps","positioning","withArrow","role","tabIndex","popoverOpen","setPopoverOpen","useControllableState","open","defaultState","defaultOpen","initialState","onOpenChange","mergeCallbacks","e","data","infoRef","onBlurButtonOrInfo","nextFocused","relatedTarget","current","elementContains","onBlur","useEventCallback","onBlurCapture"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAoCaA;;;eAAAA;;;;iEApCU;wCACmE;gCASnF;8BACiC;AAIxC,MAAMC,oBAAoB;IACxBC,OAAAA,WAAAA,GAAOC,OAAAC,aAAA,CAACC,+CAAAA,EAAAA;IACRC,QAAAA,WAAAA,GAAQH,OAAAC,aAAA,CAACG,+CAAAA,EAAAA;IACTC,OAAAA,WAAAA,GAAOL,OAAAC,aAAA,CAACK,+CAAAA,EAAAA;AACV;AAEA,MAAMC,iBAAiB;IACrBR,OAAO;IACPI,QAAQ;IACRE,OAAO;AACT;AAWO,MAAMR,yBAAyB,CAACW,OAAwBC;IAC7D,MAAM,EAAEC,OAAO,QAAQ,EAAEC,SAAS,IAAI,EAAE,GAAGH;IAE3C,MAAMI,UAAUC,IAAAA,6BAAAA,EAAcJ;IAE9B,MAAMK,QAAyB;QAC7BH;QACAD;QAEAK,YAAY;YACVC,MAAM;YACNC,SAASC,qBAAAA;YACTC,MAAMC,4BAAAA;QACR;QAEAJ,MAAMK,oBAAAA,CAAKC,MAAM,CACfC,IAAAA,wCAAAA,EAAyB,UAAU;YACjCC,UAAU1B,iBAAiB,CAACY,KAAK;YACjCe,MAAM;YACN,cAAc;YACd,GAAGjB,KAAK;YACRC,KAAKG;QACP,IACA;YAAEc,aAAa;QAAS;QAE1BT,SAASI,oBAAAA,CAAKC,MAAM,CAACd,MAAMS,OAAO,EAAE;YAClCU,cAAc;gBACZhB;gBACAiB,aAAa;gBACblB,MAAMH,cAAc,CAACG,KAAK;gBAC1BmB,WAAW;YACb;YACAH,aAAaR,qBAAAA;QACf;QACAC,MAAME,oBAAAA,CAAKC,MAAM,CAACd,MAAMW,IAAI,EAAE;YAC5BQ,cAAc;gBACZG,MAAM;gBACNC,UAAU,CAAC;YACb;YACAL,aAAaN,4BAAAA;QACf;IACF;IAEA,MAAM,CAACY,aAAaC,eAAe,GAAGC,IAAAA,oCAAAA,EAAqB;QACzDpB,OAAOA,MAAMG,OAAO,CAACkB,IAAI;QACzBC,cAActB,MAAMG,OAAO,CAACoB,WAAW;QACvCC,cAAc;IAChB;IAEAxB,MAAMG,OAAO,CAACkB,IAAI,GAAGH;IACrBlB,MAAMG,OAAO,CAACsB,YAAY,GAAGC,IAAAA,8BAAAA,EAAe1B,MAAMG,OAAO,CAACsB,YAAY,EAAE,CAACE,GAAGC,OAAST,eAAeS,KAAKP,IAAI;IAE7G,MAAMQ,UAAU9B,IAAAA,6BAAAA,EAAcC,MAAMK,IAAI,CAACV,GAAG;IAC5CK,MAAMK,IAAI,CAACV,GAAG,GAAGkC;IAEjB,kEAAkE;IAClE,MAAMC,qBAAqB,CAACH;QAC1B,MAAMI,cAAcJ,EAAEK,aAAa;QAEnC,IAAID,eAAejC,QAAQmC,OAAO,KAAKF,eAAe,CAACG,IAAAA,+BAAAA,EAAgBL,QAAQI,OAAO,EAAEF,cAAc;YACpGZ,eAAe;QACjB;IACF;IAEAnB,MAAME,IAAI,CAACiC,MAAM,GAAGC,IAAAA,gCAAAA,EAAiBV,IAAAA,8BAAAA,EAAe1B,MAAME,IAAI,CAACiC,MAAM,EAAEL;IACvE9B,MAAMK,IAAI,CAACgC,aAAa,GAAGD,IAAAA,gCAAAA,EAAiBV,IAAAA,8BAAAA,EAAe1B,MAAMK,IAAI,CAACgC,aAAa,EAAEP;IACrF,OAAO9B;AACT"}